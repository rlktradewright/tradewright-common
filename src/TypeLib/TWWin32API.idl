//
// NB: this file depends on a custom version of oaidl.idl being in the same folder. The custom version has the definition for
//     IEnumVariant removed, because this file also declares it in a VB-friendly way. Otherwise this causes an error in midl
//     because midl automatically includes oaidl.idl.

// NB: any project that references this type library and either implements IEnumVariant or uses variables of type IEnumVariant
//     must ensure this reference comes before the reference to OLE Automation (since that includes the 'official' declaration
//     of IEnumVariant).


[
    uuid(047fe23b-9e6e-4747-9687-ed3c7a5d4204),
    helpstring("TradeWright Win32 API TypeLib v2.0"),
    version(1.0)
] 

library TWWin32API
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");


//---------------------------------------------------------------------
//    Constants
//---------------------------------------------------------------------

/* 3D border styles */
        const long BDR_RAISEDOUTER =0x0001;
        const long BDR_SUNKENOUTER =0x0002;
        const long BDR_RAISEDINNER =0x0004;
        const long BDR_SUNKENINNER =0x0008;

        const long BDR_OUTER       =(BDR_RAISEDOUTER | BDR_SUNKENOUTER);
        const long BDR_INNER       =(BDR_RAISEDINNER | BDR_SUNKENINNER);
        const long BDR_RAISED      =(BDR_RAISEDOUTER | BDR_RAISEDINNER);
        const long BDR_SUNKEN      =(BDR_SUNKENOUTER | BDR_SUNKENINNER);


        const long EDGE_RAISED     =(BDR_RAISEDOUTER | BDR_RAISEDINNER);
        const long EDGE_SUNKEN     =(BDR_SUNKENOUTER | BDR_SUNKENINNER);
        const long EDGE_ETCHED     =(BDR_SUNKENOUTER | BDR_RAISEDINNER);
        const long EDGE_BUMP       =(BDR_RAISEDOUTER | BDR_SUNKENINNER);

/* Border flags */
        const long BF_LEFT         =0x0001;
        const long BF_TOP          =0x0002;
        const long BF_RIGHT        =0x0004;
        const long BF_BOTTOM       =0x0008;

        const long BF_TOPLEFT      =(BF_TOP | BF_LEFT);
        const long BF_TOPRIGHT     =(BF_TOP | BF_RIGHT);
        const long BF_BOTTOMLEFT   =(BF_BOTTOM | BF_LEFT);
        const long BF_BOTTOMRIGHT  =(BF_BOTTOM | BF_RIGHT);
        const long BF_RECT         =(BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM);

        const long BF_DIAGONAL     =0x0010;

// For diagonal lines, the BF_RECT flags specify the end point of the
// vector bounded by the rectangle parameter.
        const long BF_DIAGONAL_ENDTOPRIGHT     =(BF_DIAGONAL | BF_TOP | BF_RIGHT);
        const long BF_DIAGONAL_ENDTOPLEFT      =(BF_DIAGONAL | BF_TOP | BF_LEFT);
        const long BF_DIAGONAL_ENDBOTTOMLEFT   =(BF_DIAGONAL | BF_BOTTOM | BF_LEFT);
        const long BF_DIAGONAL_ENDBOTTOMRIGHT  =(BF_DIAGONAL | BF_BOTTOM | BF_RIGHT);
    const long BS_NULL                            = 1;
    const long BS_HOLLOW                        = BS_NULL;

    const long IOC_IN                            = 0x80000000;
    const long IOC_VENDOR                        = 0x18000000;

    const long Key_Enumerate_Sub_Keys         = 0x8;
    const long Key_Notify                     = 0x10;
    const long Key_Query_Value                = 0x1;

    const long Read_Control                   = 0x20000;

    const long Standard_Rights_Read           = Read_Control;
    const long Synchronize                    = 0x100000;

    const long Qs_Hotkey                      = 0x80;
    const long Qs_Key                         = 0x1;
    const long Qs_MouseButton                 = 0x4;
    const long Qs_MouseMove                   = 0x2;
    const long Qs_Paint                       = 0x20;
    const long Qs_PostMessage                 = 0x8;
    const long Qs_SendMessage                 = 0x40;
    const long Qs_Timer                       = 0x10;
    const long Qs_AllPostMessage                = 0x0100;

    const long Qs_Mouse                       = Qs_MouseMove | Qs_MouseButton;
    const long Qs_Input                       = Qs_Mouse | Qs_Key;
    const long Qs_AllEvents                   = QS_Input | 
                                                Qs_PostMessage |
                                                Qs_Timer |
                                                Qs_Paint | 
                                                QS_HotKey;
    const long Qs_AllInput                    = Qs_SendMessage |
                                                Qs_Paint |
                                                Qs_Timer | 
                                                Qs_PostMessage |
                                                QS_MouseButton | 
                                                Qs_MouseMove |
                                                Qs_HotKey |
                                                Qs_Key;

    const long TA_NOUPDATECP                    = 0;
    const long TA_UPDATECP                        = 1;
    const long TA_LEFT                            = 0;
    const long TA_RIGHT                            = 2;
    const long TA_CENTER                        = 6;
    const long TA_TOP                            = 0;
    const long TA_BOTTOM                        = 8;
    const long TA_BASELINE                        = 24;
    const long TA_RTLREADING                    = 256;

    const long TA_MASK                           = (TA_BASELINE | TA_CENTER | TA_UPDATECP | TA_RTLREADING);

    const long Thread_Base_Priority_Idle        = -15;
    const long Thread_Base_Priority_Min            = -2;
    const long Thread_Base_Priority_Max            = 2;
    const long Thread_Priority_Idle                = Thread_Base_Priority_Idle;
    const long Thread_Priority_Lowest            = Thread_Base_Priority_Min;
    const long Thread_Priority_Highest            = Thread_Base_Priority_Max;
    const long Thread_Priority_Below_Normal   = (Thread_Priority_Lowest + 1);
    const long Thread_Priority_Normal            = 0;
    const long Thread_Priority_Above_Normal        = (Thread_Priority_Highest - 1);

    const long Key_Read                       = ((Standard_Rights_Read |
                                                    Key_Query_Value | 
                                                    Key_Enumerate_Sub_Keys | 
                                                    Key_Notify) & 
                                                    (~ Synchronize));

    const long VTA_BASELINE                     = TA_BASELINE;
    const long VTA_LEFT                         = TA_BOTTOM;
    const long VTA_RIGHT                        = TA_TOP;
    const long VTA_CENTER                       = TA_CENTER;
    const long VTA_BOTTOM                       = TA_RIGHT;
    const long VTA_TOP                          = TA_LEFT;

    const long WS_OVERLAPPED                  = 0x00000000;
    const long WS_POPUP                       = 0x80000000;
    const long WS_CHILD                       = 0x40000000;
    const long WS_MINIMIZE                    = 0x20000000;
    const long WS_VISIBLE                     = 0x10000000;
    const long WS_DISABLED                    = 0x08000000;
    const long WS_CLIPSIBLINGS                = 0x04000000;
    const long WS_CLIPCHILDREN                = 0x02000000;
    const long WS_MAXIMIZE                    = 0x01000000;
    const long WS_CAPTION                     = 0x00C00000;     
    const long WS_BORDER                      = 0x00800000;
    const long WS_DLGFRAME                    = 0x00400000;
    const long WS_VSCROLL                     = 0x00200000;
    const long WS_HSCROLL                     = 0x00100000;
    const long WS_SYSMENU                     = 0x00080000;
    const long WS_THICKFRAME                  = 0x00040000;
    const long WS_GROUP                       = 0x00020000;
    const long WS_TABSTOP                     = 0x00010000;
    const long WS_MINIMIZEBOX                 = 0x00020000;
    const long WS_MAXIMIZEBOX                 = 0x00010000;
    const long WS_TILED                            = WS_OVERLAPPED;
    const long WS_ICONIC                        = WS_MINIMIZE;
    const long WS_SIZEBOX                        = WS_THICKFRAME;

    const long WS_OVERLAPPEDWINDOW                = (WS_OVERLAPPED     | 
                                                 WS_CAPTION        | 
                                                 WS_SYSMENU        | 
                                                 WS_THICKFRAME     | 
                                                 WS_MINIMIZEBOX    | 
                                                 WS_MAXIMIZEBOX);

    const long WS_TILEDWINDOW                    = WS_OVERLAPPEDWINDOW;

    const long WS_POPUPWINDOW                    = (WS_POPUP          | 
                                                 WS_BORDER         | 
                                                 WS_SYSMENU);

    const long WS_CHILDWINDOW                    = (WS_CHILD);

    const long WS_EX_DLGMODALFRAME            = 0x00000001;
    const long WS_EX_NOPARENTNOTIFY           = 0x00000004;
    const long WS_EX_TOPMOST                  = 0x00000008;
    const long WS_EX_ACCEPTFILES              = 0x00000010;
    const long WS_EX_TRANSPARENT              = 0x00000020;
    const long WS_EX_MDICHILD                 = 0x00000040;
    const long WS_EX_TOOLWINDOW               = 0x00000080;
    const long WS_EX_WINDOWEDGE               = 0x00000100;
    const long WS_EX_CLIENTEDGE               = 0x00000200;
    const long WS_EX_CONTEXTHELP              = 0x00000400;
    const long WS_EX_RIGHT                    = 0x00001000;
    const long WS_EX_LEFT                     = 0x00000000;
    const long WS_EX_RTLREADING               = 0x00002000;
    const long WS_EX_LTRREADING               = 0x00000000;
    const long WS_EX_LEFTSCROLLBAR            = 0x00004000;
    const long WS_EX_RIGHTSCROLLBAR           = 0x00000000;
    const long WS_EX_CONTROLPARENT            = 0x00010000;
    const long WS_EX_STATICEDGE               = 0x00020000;
    const long WS_EX_APPWINDOW                = 0x00040000;
    const long WS_EX_OVERLAPPEDWINDOW            = (WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE);
    const long WS_EX_PALETTEWINDOW                = (WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST);
    const long WS_EX_LAYERED                  = 0x00080000;
    const long WS_EX_NOINHERITLAYOUT          = 0x00100000;
    const long WS_EX_LAYOUTRTL                = 0x00400000;
    const long WS_EX_COMPOSITED               = 0x02000000;
    const long WS_EX_NOACTIVATE               = 0x08000000;



//---------------------------------------------------------------------
//    Enums
//---------------------------------------------------------------------
 
//---------------------------------------------------------------------
//    Structs
//---------------------------------------------------------------------

    typedef struct BITMAP {
        long bmType; 
        long bmWidth; 
        long bmHeight; 
        long bmWidthBytes; 
        short bmPlanes; 
        short bmBitsPixel; 
        long bmBits; 
    } BITMAP; 

    typedef struct CIEXYZ
    {
            long ciexyzX;
            long ciexyzY;
            long ciexyzZ;
    } CIEXYZ;

    typedef struct CIEXYZTRIPLE {
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
    } CIEXYZTRIPLE;

    typedef struct BITMAPINFOHEADER{
            long      biSize;
            LONG       biWidth;
            LONG       biHeight;
            WORD       biPlanes;
            WORD       biBitCount;
            long      biCompression;
            long      biSizeImage;
            LONG       biXPelsPerMeter;
            LONG       biYPelsPerMeter;
            long      biClrUsed;
            long      biClrImportant;
    } BITMAPINFOHEADER;

    typedef struct RGBQUAD {
            BYTE    rgbBlue;
            BYTE    rgbGreen;
            BYTE    rgbRed;
            BYTE    rgbReserved;
    } RGBQUAD;
    typedef RGBQUAD;

    typedef struct BITMAPINFO {
        BITMAPINFOHEADER    bmiHeader;
        RGBQUAD             bmiColors[1];
    } BITMAPINFO;

    typedef struct BITMAPV5HEADER{ 
        long        bV5Size; 
        long         bV5Width; 
        long         bV5Height; 
        short         bV5Planes; 
        short         bV5BitCount; 
        long        bV5Compression; 
        long        bV5SizeImage; 
        long         bV5XPelsPerMeter; 
        long         bV5YPelsPerMeter; 
        long        bV5ClrUsed; 
        long        bV5ClrImportant; 
        long        bV5RedMask; 
        long        bV5GreenMask; 
        long        bV5BlueMask; 
        long        bV5AlphaMask; 
        long        bV5CSType; 
        CIEXYZTRIPLE bV5Endpoints; 
        long        bV5GammaRed; 
        long        bV5GammaGreen; 
        long        bV5GammaBlue; 
        long        bV5Intent; 
        long        bV5ProfileData; 
        long        bV5ProfileSize; 
        long        bV5Reserved; 
    } BITMAPV5HEADER; 

    typedef struct BLENDFUNCTION
    {
        byte   BlendOp;
        byte   BlendFlags;
        byte   SourceConstantAlpha;
        byte   AlphaFormat;
    }BLENDFUNCTION;

    typedef struct DRAWTEXTPARAMS {
        long cbSize;
        long iTabLength;
        long iLeftMargin;
        long iRightMargin;
        long uiLengthDrawn;
    } DRAWTEXTPARAMS;

    typedef struct GDI_POINT {
       long X;
       long Y;
    } GDI_POINT;

    typedef struct GDI_RECT {
        long Left;
        long Top;
        long Right;
        long Bottom;
    } GDI_RECT;

    typedef struct GDI_SIZE { 
     long cx; 
     long cy; 
    } GDI_SIZE; 

    typedef struct GRADIENT_RECT {
        long UpperLeft;
        long LowerRight;
    } GRADIENT_RECT;

    typedef struct GRADIENT_TRIANGLE {
        long Vertex1;
        long Vertex2;
        long Vertex3;
    } GRADIENT_TRIANGLE;

    typedef struct GUIDString {
        byte StartBrace[2];
        byte GUIDProper[72];
        byte EndBrace[2];
        byte ZeroByte[2];
    } GUIDString;

    typedef struct GUIDStruct {
        long Data[4];
    } GUIDStruct;

    typedef struct INITCOMMONCONTROLSSTRUCT {
        long dwSize;             // size of this structure
        long dwICC;              // flags indicating which classes to be initialized
    } INITCOMMONCONTROLSSTRUCT;

    typedef struct INT64 {
         long Lowpart;
        long Highpart;
    } Int64;

    typedef struct LOGBRUSH { 
        long lbStyle; 
        long lbColor; 
        long lbHatch; 
    } LOGBRUSH; 

    const long LF_FACESIZE        = 64;
    typedef struct LOGFONTW
    {
        long      lfHeight;
        long      lfWidth;
        long      lfEscapement;
        long      lfOrientation;
        long      lfWeight;
        byte      lfItalic;
        byte      lfUnderline;
        byte      lfStrikeOut;
        byte      lfCharSet;
        byte      lfOutPrecision;
        byte      lfClipPrecision;
        byte      lfQuality;
        byte      lfPitchAndFamily;
        byte      lfFaceName[LF_FACESIZE];
    } LOGFONTW;

    typedef struct LOGPEN { 
        long lopnStyle; 
        GDI_POINT lopnWidth; 
        long lopnColor; 
    } LOGPEN; 

    typedef struct MINMAXINFO {
        GDI_POINT ptReserved;
        GDI_POINT ptMaxSize;
        GDI_POINT ptMaxPosition;
        GDI_POINT ptMinTrackSize;
        GDI_POINT ptMaxTrackSize;
    } MINMAXINFO;

    typedef struct NONCLIENTMETRICSW
    {
        long     cbSize;
        long     iBorderWidth;
        long     iScrollWidth;
        long     iScrollHeight;
        long     iCaptionWidth;
        long     iCaptionHeight;
        LOGFONTW lfCaptionFont;
        long     iSmCaptionWidth;
        long     iSmCaptionHeight;
        LOGFONTW lfSmCaptionFont;
        long     iMenuWidth;
        long     iMenuHeight;
        LOGFONTW lfMenuFont;
        LOGFONTW lfStatusFont;
        LOGFONTW lfMessageFont;
        long     iPaddedBorderWidth; /* this field absent if WinVer < 0x0600 */
    }   NONCLIENTMETRICSW;

    typedef struct PAINTSTRUCT { 
     long  hdc; 
     long fErase; 
      GDI_RECT rcPaint; 
     long fRestore; 
     long fIncUpdate; 
      byte rgbReserved[32]; 
    } PAINTSTRUCT; 

    typedef struct POLYTEXT
    {
        long x;
        long y;
        long n;
        long lpstr;
        long uiFlags;
        GDI_RECT rcl;
        long pdx;
    } POLYTEXT;

    typedef struct RGNDATAHEADER { 
        long dwSize; 
        long iType; 
        long nCount; 
        long nRgnSize; 
        GDI_RECT  rcBound; 
    } RGNDATAHEADER; 

    typedef struct RGNDATA { 
        RGNDATAHEADER rdh; 
        byte Buffer; 
    } RGNDATA; 

    typedef struct SYSTEM_INFO {
        long dwOemID;
        long dwPageSize;
        long lpMinimumApplicationAddress;
        long lpMaximumApplicationAddress;
        long dwActiveProcessorMask;
        long dwNumberOfProcessors;
        long dwProcessorType;
        long dwAllocationGranularity;
        int wProcessorLevel;
        int wProcessorRevision;
    } SYSTEM_INFO;

    typedef struct SYSTEMTIME {
        short Year;
        short Month;
        short DayOfWeek;
        short Day;
        short Hour;
        short Minute;
        short Second;
        short Milliseconds;
    } SYSTEMTIME;

    typedef struct REG_TIME_ZONE_INFORMATION {
       long Bias;
       long StandardBias;
       long DaylightBias;
        SYSTEMTIME StandardDate;
        SYSTEMTIME DaylightDate;
    } REG_TIME_ZONE_INFORMATION;

    typedef struct TcpKeepalive {
        long    Onoff; 
        long     KeepaliveTime;
        long     KeepaliveInterval;
    } TcpKeepalive;

    typedef struct TEXTMETRICW    {
        long        tmHeight;
        long        tmAscent;
        long        tmDescent;
        long        tmInternalLeading;
        long        tmExternalLeading;
        long        tmAveCharWidth;
        long        tmMaxCharWidth;
        long        tmWeight;
        long        tmOverhang;
        long        tmDigitizedAspectX;
        long        tmDigitizedAspectY;
        byte         tmFirstChar[2];
        byte         tmLastChar[2];
        byte         tmDefaultChar[2];
        byte         tmBreakChar[2];
        byte        tmItalic;
        byte        tmUnderlined;
        byte        tmStruckOut;
        byte        tmPitchAndFamily;
        byte        tmCharSet;
    } TEXTMETRICW;

   typedef struct TIMECAPS {
       long wPeriodMin;
       long wPeriodMax;
    } TIMECAPS;

    typedef struct TIME_ZONE_INFORMATION {
       long Bias;
        byte StandardName[63];
        SYSTEMTIME StandardDate;
       long StandardBias;
        byte DaylightName[63];
        SYSTEMTIME DaylightDate;
       long DaylightBias;
    } TIME_ZONE_INFORMATION ;

    typedef struct TRACKMOUSEEVENTSTRUCT {
        long cbSize;
        long dwFlags;
        long hwndTrack;
        long dwHoverTime;
    } TRACKMOUSEEVENTSTRUCT;

    typedef struct TRIVERTEX {
        long X;
        long Y;
        byte Filler1;
        byte Red;
        byte Filler2;
        byte Green;
        byte Filler3;
        byte Blue;
        byte Filler4;
        byte Alpha;
    } TRIVERTEX;

    typedef struct WSAOVERLAPPED {
        long Internal;
        long InternalHigh;
        long Offset;
        long OffsetHigh;
        long hEvent;
    } WSAOVERLAPPED;

    typedef struct XFORM {
        float eM11;
        float eM12;
        float eM21;
        float eM22;
        float eDx;
        float eDy;
    } XForm;

//---------------------------------------------------------------------
// Interfaces 
//---------------------------------------------------------------------

    [        
        uuid(00020404-0000-0000-C000-000000000046),
        nonextensible,
        helpstring("VB-friendly redefinition of IEnumVARIANT")
    ]
        interface IEnumVARIANT : IUnknown {

        // Methods =====================================================

        HRESULT Next(
            [in] long numElementsRequested, 
            [in, out] VARIANT * items, 
            [in] long numElementsFetched);

        HRESULT Skip(
            [in] long numElementsToSkip);

        HRESULT Reset();

        HRESULT Clone(
            [in, out] IEnumVARIANT ** clonedEnum);

    };
    
    
//---------------------------------------------------------------------
//    Modules
//---------------------------------------------------------------------

    [dllname("advapi32")]
    module advapi32
    {

        [entry("RegCloseKey")]
        long RegCloseKey(
            [in] long hKey);

        [entry("RegEnumKeyA")]
        long RegEnumKey(
            [in] long hKey, 
            [in] long dwIndex, 
            [in] LPSTR lpName, 
            [in] long cbName);

        [entry("RegOpenKeyExA")]
        long RegOpenKeyEx(
            [in] long hKey, 
            [in] LPSTR lpSubKey, 
            [in] long ulOptions, 
            [in] long samDesired, 
            [in, out] long* phkResult);
                
        [entry("RegQueryValueExA")]
        long RegQueryValueEx(
            [in] long hKey, 
            [in] LPSTR lpValueName, 
            [in] long lpReserved, 
            [in, out] long* lpType, 
            [in] long lpData, 
            [in, out] long* lpcbData);

    };

    [dllname("comctl32")]
    module Comctl32
    {

        [entry("InitCommonControlsEx")]
        long InitCommonControlsEx([in, out] INITCOMMONCONTROLSSTRUCT* lpInitCommonControlsStruct );

    };

    [dllname("gdi32")]
    module gdi32
    {
        [entry("AbortPath")]
        long AbortPath(
            [in] long hdc);
            
        [entry("AlphaBlend")]
        long AlphaBlend( 
            [in] long hdcDest, 
            [in] long xoriginDest, 
            [in] long yoriginDest, 
            [in] long wDest, 
            [in] long hDest, 
            [in] long hdcSrc, 
            [in] long xoriginSrc, 
            [in] long yoriginSrc, 
            [in] long wSrc, 
            [in] long hSrc, 
            [in, out] BLENDFUNCTION* ftn);

        [entry("AngleArc")]
        long AngleArc(
            [in] long hdc,
            [in] long x,
            [in] long y,
            [in] long radius,
            [in] float startAngle,
            [in] float sweepAngle);

        [entry("Arc")]
        long Arc(
            [in] long hdc,
            [in] long nLeftRect,
            [in] long nTopRect,
            [in] long nRightRect,
            [in] long nBottomRect,
            [in] long nXStartArc,
            [in] long nYStartArc,
            [in] long nXEndArc,
            [in] long nYEndArc);
        
        [entry("ArcTo")]
        long ArcTo(
            [in] long hdc,
            [in] long nLeftRect,
            [in] long nTopRect,
            [in] long nRightRect,
            [in] long nBottomRect,
            [in] long nXStartArc,
            [in] long nYStartArc,
            [in] long nXEndArc,
            [in] long nYEndArc);
        
        [entry("BeginPath")]
        long BeginPath(
            [in] long hdc);
            
        [entry("BitBlt")]
        long BitBlt( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in] long cx, 
            [in] long cy, [in] long hdcSrc, 
            [in] long x1, 
            [in] long y1, 
            [in] long rop);        
            
        [entry("Chord")]
        long Chord(
            [in] long hdc,
            [in] long nLeftRect,
            [in] long nTopRect,
            [in] long nRightRect,
            [in] long nBottomRect,
            [in] long nXRadial1,
            [in] long nYRadial1,
            [in] long nXRadial2,
            [in] long nYRadial2);
        
        [entry("ClientToScreen")]
        long ClientToScreen(
          [in] long hWnd,
          [in, out] GDI_POINT* lpPoint);

        [entry("CloseFigure")]
        long CloseFigure(
            [in] long hdc);
            
        [entry("CombineRgn")]
        long CombineRgn( 
            [in] long hrgnDst, 
            [in] long hrgnSrc1, 
            [in] long hrgnSrc2, 
            [in] long iMode);
            
        [entry("CombineTransform")]
        long CombineTransform(
            [in] XFORM* lpXformResult, 
            [in] XFORM* lpXform1,
            [in] XFORM* lpXform2);

        [entry("CreateBitmap")]
        long CreateBitmap( 
            [in] long nWidth, 
            [in] long nHeight, 
            [in] long nPlanes, 
            [in] long nBitCount, 
            [in] long lpBits);

        [entry("CreateBitmapIndirect")]
        long CreateBitmapIndirect( 
            [in, out] BITMAP* pbm);
            
        [entry("CreateBrushIndirect")]
        long CreateBrushIndirect( 
            [in, out] LOGBRUSH* plbrush);
            
        [entry("CreateCompatibleBitmap")]
        long CreateCompatibleBitmap( 
            [in] long hdc, 
            [in] long cx, 
            [in] long cy);
            
        [entry("CreateDiscardableBitmap")]
        long CreateDiscardableBitmap( 
            [in] long hdc, 
            [in] long cx, 
            [in] long cy);
            
        [entry("CreateCompatibleDC")]
        long CreateCompatibleDC( 
            [in] long hdc);
            
        [entry("CreateDIBitmap")]
        long CreateDIBitmap( 
            [in] long hdc, [in, out] BITMAPV5HEADER* pbmih, 
            [in] long flInit, 
            [in] long pjBits, 
            [in, out] BITMAPINFO* pbmi, 
            [in] long iUsage);
            
        [entry("CreateDIBPatternBrushPt")]
        long CreateDIBPatternBrushPt( 
            [in] long lpPackedDIB, 
            [in] long iUsage);
            
        [entry("CreateEllipticRgn")]
        long CreateEllipticRgn( 
            [in] long x1, 
            [in] long y1, 
            [in] long x2, 
            [in] long y2);
            
        [entry("CreateEllipticRgnIndirect")]
        long CreateEllipticRgnIndirect( 
            [in, out] GDI_RECT* lprect);

        [entry("CreateFontW")]
        long CreateFont( 
            [in] long cHeight, 
            [in] long cWidth, 
            [in] long cEscapement, 
            [in] long cOrientation, 
            [in] long cWeight, 
            [in] long bItalic,
            [in] long bUnderline, 
            [in] long bStrikeOut, 
            [in] long iCharSet, 
            [in] long iOutPrecision, 
            [in] long iClipPrecision,
            [in] long iQuality, 
            [in] long iPitchAndFamily, 
            [in] long pszFaceName);

         [entry("CreateHatchBrush")]
        long CreateHatchBrush(
            long fnStyle,
            long clrref);

        [entry("CreatePatternBrush")]
        long CreatePatternBrush( 
            [in] long hbm);
            
        [entry("CreatePen")]
        long CreatePen( 
            [in] long iStyle, 
            [in] long cWidth, 
            [in] long color);
            
        [entry("CreatePenIndirect")]
        long CreatePenIndirect( 
            [in, out] LOGPEN* plpen);
            
        [entry("CreatePolyPolygonRgn")]
        long CreatePolyPolygonRgn(  
            [in, out] GDI_POINT* pptl,
            [in, out] long* pc,
            [in] long cPoly,
            [in] long iMode);
            
        [entry("CreatePolygonRgn")] 
        long CreatePolygonRgn(    
            [in, out] GDI_POINT* pptl,
            [in] long cPoint,
            [in] long iMode);
            
        [entry("CreateRectRgn")] 
        long CreateRectRgn(
            [in] long x1, 
            [in] long y1, 
            [in] long x2, 
            [in] long y2);

        [entry("CreateRectRgnIndirect")]
        long CreateRectRgnIndirect( 
            [in, out] GDI_RECT* lprect);
            
        [entry("CreateRoundRectRgn")]
        long CreateRoundRectRgn( 
            [in] long x1, 
            [in] long y1, 
            [in] long x2, 
            [in] long y2, 
            [in] long w, 
            [in] long h);

        [entry("CreateSolidBrush")] 
        long CreateSolidBrush(
            [in] long crColor);

        [entry("DeleteDC")] 
        long DeleteDC( 
            [in] long hdc);

        [entry("DeleteObject")] 
        long DeleteObject(
            [in] long hObject);

        [entry("DPtoLP")] 
        long DPtoLP( 
            [in] long hdc, 
            [in, out] GDI_POINT* lppt, 
            [in] long c);
            
        [entry("Ellipse")]
        long Ellipse(
            [in] long hdc,
            [in] long nLeftRect,
            [in] long nTopRect,
            [in] long nRightRect,
            [in] long nBottomRect);
        
        [entry("EndPath")]
        long EndPath(
            [in] long hdc);
            
        [entry("EqualRgn")]
        long EqualRgn( 
            [in] long hrgn1, 
            [in] long hrgn2);

        [entry("ExcludeClipRect")]
        long ExcludeClipRect( 
            [in] long hdc, 
            [in] long Left, 
            [in] long Top, 
            [in] long Right, 
            [in] long Bottom);
            
        [entry("ExtCreatePen")]
        long ExtCreatePen( 
            [in] long iPenStyle,
            [in] long cWidth,
            [in, out] LOGBRUSH* plbrush,
            [in] long cStyle,
            [in] long pstyle);
            
        [entry("ExtCreateRegion")]
        long ExtCreateRegion( 
            [in, out] XFORM* lpx, [in] long nCount, [in, out] RGNDATA* lpData);
            
        [entry("ExtFloodFill")]
        long ExtFloodFill( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in] long color, 
            [in] long type);
            
        [entry("ExtSelectClipRgn")]
        long ExtSelectClipRgn(
            [in] long hDC, 
            [in] long hRgn, 
            [in] long fnMode);

        [entry("ExtTextOutW")]
        long ExtTextOut(
            [in] long hDC, 
            [in] long x, 
            [in] long y, 
            [in] long fuOptions,
            [in] long lprc,
            [in] long lpString,
            [in] long cbCount,
            [in] long lpDx);

        [entry("FillPath")]
        long FillPath(
            [in] long hdc);
            
        [entry("FillRgn")]
        long FillRgn( 
            [in] long hdc, 
            [in] long hrgn, [in] long hbr);
            
        [entry("FlattenPath")]
        long FlattenPath(
            [in] long hdc);
            
        [entry("FrameRgn")]
        long FrameRgn( 
            [in] long hdc, 
            [in] long hrgn, 
            [in] long hbr, 
            [in] long w, 
            [in] long h);

        [entry("FrameRect")]
        long FrameRect(
            [in] long hDC,
            [in] long lprect,
            [in] long hbrush);

        [entry("GetArcDirection")]
        long GetArcDirection(
            [in] long hdc);

        [entry("GetBkColor")]
        long GetBkColor(
            [in] long hDC);
                
        [entry("GetBkMode")]
        long GetBkMode(
            [in] long hdc);

        [entry("GetBitmapBits")]
        long GetBitmapBits(
            [in] long hbit,
            [in] long cb,
            [in] long pvBits);

        [entry("GetBitmapDimensionEx")]
        long GetBitmapDimensionEx( 
            [in] long hbit, 
            [in, out] GDI_SIZE* lpsize);
            
        [entry("GetBoundsRect")]
        long GetBoundsRect( 
            [in] long hdc, 
            [in, out] GDI_RECT* lprect, 
            [in] long flags);

        [entry("GetBrushOrgEx")]
        long GetBrushOrgEx( 
            [in] long hdc, 
            [in, out] GDI_POINT* lppt);

        [entry("GetClipBox")]
        long GetClipBox( 
            [in] long hdc,  
            [in, out] GDI_RECT* lprect);
            
        [entry("GetClipRgn")]
        long GetClipRgn( 
            [in] long hdc, 
            [in] long hrgn);
            
        [entry("GetCurrentObject")]
        long GetCurrentObject( 
            [in] long hdc, [in] long type);
            
        [entry("GetCurrentPositionEx")]
        long GetCurrentPositionEx( 
            [in] long hdc,  [in, out] GDI_POINT* lppt);
            
        [entry("GetDCBrushColor")]
        long GetDCBrushColor( 
            [in] long hdc);
            
        [entry("GetDCOrgEx")]
        long GetDCOrgEx( 
            [in] long hdc, 
            [in, out] GDI_POINT* lppt);
            
        [entry("GetDCPenColor")]
        long GetDCPenColor( 
            [in] long hdc);
            
        [entry("GetDIBits")]
        long GetDIBits( 
            [in] long hdc, 
            [in] long hbm, 
            [in] long start, 
            [in] long cLines,  
            [in] long lpvBits, 
            [in, out] BITMAPINFO* lpbmi, 
            [in] long usage);

        [entry("GetGraphicsMode")]
        long GetGraphicsMode( 
            [in] long hdc);
            
        [entry("GetMapMode")]
        long GetMapMode( 
            [in] long hdc);

        [entry("GetMiterLimit")]
        long GetMiterLimit(
            [in] long hdc, 
            [in, out] float* plimit);
            
        [entry("GetObjectW")]
        long GetObject(
            [in] long h, [in] long c, 
            [in] long pv);

        [entry("GetObjectType")]
        long GetObjectType( [in] long h);

        [entry("GetPath")]
        long GetPath(
            [in] long hdc, 
            [in, out] GDI_POINT* apt, 
            [in, out] byte* aj, 
            [in] long cpt);
            
        [entry("GetPixel")]
        long GetPixel( 
            [in] long hdc, 
            [in] long x, 
            [in] long y);
            
        [entry("GetPolyFillMode")]
        long GetPolyFillMode( 
            [in] long hdc);
            
        [entry("GetRegionData")]
        long GetRegionData(   
            [in] long hrgn,
            [in] long nCount,
            [in, out] RGNDATA* lpRgnData);
            
        [entry("GetRgnBox")]
        long GetRgnBox( 
            [in] long hrgn,  
            [in, out] GDI_RECT* lprc);
            
        [entry("GetStockObject")]
        long GetStockObject( 
            [in] long i);
            
        [entry("GetStretchBltMode")]
        long GetStretchBltMode(
            [in] long hdc);

        [entry("GetTextAlign")]
        long GetTextAlign(
            [in] long hdc);

        [entry("GetTextColor")]
        long GetTextColor(
            [in] long hdc);

        [entry("GetTextExtentPoint32W")]
        long GetTextExtentPoint32(
            [in] long hdc,
            [in] long lpString,
            [in] long c,
            [in, out] GDI_SIZE* psizl);
    
        [entry("GetTextExtentExPointW")]
            long GetTextExtentExPoint(
            [in] long hdc,
            [in] long lpszString,
            [in] long cchString,
            [in] long nMaxExtent,
            [in, out] long* lpnFit,
            [in, out] long* lpnDx,
            [in, out] GDI_SIZE* lpSize);

        [entry("GetTextMetricsW")]
        long GetTextMetrics( 
            [in] long hDC,
            [in, out] TEXTMETRICW* pMetrics);

        [entry("GetViewportExtEx")]
        long GetViewportExtEx( 
            [in] long hdc, 
            [in, out] GDI_SIZE* lpsize);
            
        [entry("GetViewportOrgEx")]
        long GetViewportOrgEx( 
            [in] long hdc, 
            [in, out] GDI_POINT* lppoint);
            
        [entry("GetWindowExtEx")]
        long GetWindowExtEx( 
            [in] long hdc, 
            [in, out] GDI_SIZE* lpsize);
            
        [entry("GetWindowOrgEx")]
        long GetWindowOrgEx( 
            [in] long hdc, 
            [in, out] GDI_POINT* lppoint);

        [entry("GetWorldTransform")]
        long GetWorldTransform(
          [in] long hdc,
          [in, out] XFORM* lpXform);

        [entry("IntersectClipRect")]
        long IntersectClipRect( 
            [in] long hdc, 
            [in] long Left, 
            [in] long Top, 
            [in] long Right, 
            [in] long Bottom);
            
        [entry("InvertRgn")]
        long InvertRgn( 
            [in] long hdc, 
            [in] long hrgn);

        [entry("InvertRect")]
        long InvertRect(
            [in] long hDC,
            [in] long lprect);

        [entry("LineTo")]
        long LineTo(
            [in] long hDC,
            [in] long nXEnd,
            [in] long nYEnd);

        [entry("LPtoDP")] 
        long LPtoDP( 
            [in] long hDC,
            [in, out] GDI_POINT* lppt, 
            [in] long c);

        [entry("MaskBlt")]
        long MaskBlt( 
            [in] long hdcDest, 
            [in] long xDest, 
            [in] long yDest, 
            [in] long width, 
            [in] long height,
            [in] long hdcSrc, 
            [in] long xSrc, 
            [in] long ySrc, 
            [in] long hbmMask, 
            [in] long xMask, 
            [in] long yMask, 
            [in] long rop);
            
        [entry("ModifyWorldTransform")]
        long ModifyWorldTransform(
            [in] long hdc, 
            [in, out] XFORM* lpXform, 
            [in] long iMode);

        [entry("MoveToEx")]
        long MoveToEx(
            [in] long hDC,
            [in] long X,
            [in] long Y, 
            [in] long lpPoint);

        [entry("OffsetClipRgn")]
        long OffsetClipRgn(
            [in] long hdc, 
            [in] long x, 
            [in] long y);
            
        [entry("OffsetRgn")]
        long OffsetRgn(
            [in] long hrgn, 
            [in] long x, 
            [in] long y);
            
        [entry("OffsetViewportOrgEx")]
        long OffsetViewportOrgEx( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in, out] GDI_POINT* lppt);
            
        [entry("OffsetWindowOrgEx")]
        long OffsetWindowOrgEx( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in, out] GDI_POINT* lppt);
            
        [entry("PaintRgn")]
        long PaintRgn(
            [in] long hdc, 
            [in] long hrgn);
            
        [entry("PatBlt")]
        long PatBlt(
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in] long w, 
            [in] long h, 
            [in] long rop);
            
        [entry("PathToRegion")]
        long PathToRegion(
            [in] long hdc);
            
        [entry("Pie")]
        long Pie(
            [in] long hdc,
            [in] long nLeftRect,
            [in] long nTopRect,
            [in] long nRightRect,
            [in] long nBottomRect,
            [in] long nXRadial1,
            [in] long nYRadial1,
            [in] long nXRadial2,
            [in] long nYRadial2);
        
        [entry("PlgBlt")]
        long PlgBlt( 
            [in] long hdcDest, 
            [in] long lpPoints, 
            [in] long hdcSrc, 
            [in] long xSrc, 
            [in] long ySrc, 
            [in] long width,
            [in] long height, 
            [in] long hbmMask, 
            [in] long xMask, 
            [in] long yMask);
            
        [entry("PolyBezier")]
        long PolyBezier(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long nCount);

        [entry("PolyBezierTo")]
        long PolyBezierTo(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long nCount);

        [entry("PolyDraw")]
        long PolyDraw(
            [in] long hdc, 
            [in,out] GDI_POINT* apt, 
            [in, out] byte* aj, 
            [in] long cpt);
            
        [entry("Polygon")]
        long Polygon(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long nCount);

        [entry("Polyline")]
        long Polyline(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long nCount);

        [entry("PolylineTo")]
        long PolylineTo(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long nCount);

        [entry("PolyPolygon")]
        long PolyPolygon(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long lpPolyCounts,
            [in] long nCount);

        [entry("PolyPolyline")]
        long PolyPolyline(
            [in] long hDC, 
            [in] long lpPoints, 
            [in] long lpPolyCounts,
            [in] long nCount);

        [entry("PolyTextOut")]
        long PolyTextOut(
            [in] long hDC, 
            [in] long pptxt, 
            [in] long cStrings
        );

        [entry("PtInRegion")]
        long PtInRegion(
            [in] long hrgn, 
            [in] long x, 
            [in] long y);
            
        [entry("PtVisible")]
        long PtVisible(
            [in] long hdc, 
            [in] long x, 
            [in] long y);
            
        [entry("Rectangle")]
        long Rectangle(
            [in] long hDC, 
            [in] long nLeftRect, 
            [in] long nTopRect, 
            [in] long nRightRect, 
            [in] long nBottomRect);

        [entry("RectInRegion")]
        long RectInRegion(
            [in] long hrgn, 
            [in, out] GDI_RECT* lprect);
            
        [entry("RectVisible")]
        long RectVisible(
            [in] long hdc, 
            [in, out] GDI_RECT * lprect);
            
        [entry("RestoreDC")]
        long RestoreDC(
            [in] long hdc, 
            [in] long nSavedDC);

        [entry("RoundRect")]
        long RoundRect(
            [in] long hDC, 
            [in] long nLeftRect, 
            [in] long nTopRect, 
            [in] long nRightRect, 
            [in] long nBottomRect,
            [in] long nWidth,
            [in] long nHeight);

        [entry("SaveDC")]
        long SaveDC(
            [in] long hdc);
            
        [entry("ScaleViewportExtEx")]
        long ScaleViewportExtEx( 
            [in] long hdc, 
            [in] long xn, 
            [in] long dx, 
            [in] long yn, 
            [in] long yd, 
            [in, out] GDI_SIZE* lpsz);
            
        [entry("ScaleWindowExtEx")]
        long ScaleWindowExtEx( 
            [in] long hdc, 
            [in] long xn, 
            [in] long xd, 
            [in] long yn, 
            [in] long yd, 
            [in, out] GDI_SIZE* lpsz);
            
        [entry("SelectClipPath")]
        long SelectClipPath(
            [in] long hdc, 
            [in] long mode);
            
        [entry("SelectClipRgn")]
        long SelectClipRgn(
            [in] long hDC, 
            [in] long hRgn);

        [entry("SelectObject")]
        long SelectObject(
            [in] long hdc, 
            [in] long h);

        [entry("SetArcDirection")]
        long SetArcDirection(
            [in] long hDC,
            [in] long arcDirection);

        [entry("SetBitmapBits")] 
        long SetBitmapBits(
            [in] long hbm,
            [in] long cb,
            [in] long pvBits);

        [entry("SetBkColor")] 
        long SetBkColor(
            [in] long hdc, 
            [in] long color);

        [entry("SetBkMode")] 
        long SetBkMode(
            [in] long hdc, 
            [in] long mode);
        
        [entry("SetBoundsRect")] 
        long SetBoundsRect(
            [in] long hdc, 
            [in, out] GDI_RECT* lprect, 
            [in] long flags);
            
        [entry("SetBrushOrgEx")]
        long SetBrushOrgEx( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in, out] GDI_POINT* lppt);
            
        [entry("SetDCBrushColor")] 
        long SetDCBrushColor(
            [in] long hdc, 
            [in] long color);
            
        [entry("SetDCPenColor")] 
        long SetDCPenColor(
            [in] long hdc, 
            [in] long color);

        [entry("SetDIBits")] 
        long SetDIBits(
            [in] long hdc, 
            [in] long hbm, 
            [in] long start, 
            [in] long cLines, 
            [in] long lpBits, 
            [in, out] BITMAPINFO* lpbmi, 
            [in] long ColorUse);
            
        [entry("SetDIBitsToDevice")] 
        long SetDIBitsToDevice(
            [in] long hdc, 
            [in] long xDest, 
            [in] long yDest, 
            [in] long w, 
            [in] long h, 
            [in] long xSrc,
            [in] long ySrc, 
            [in] long StartScan, 
            [in] long cLines, 
            [in] long lpvBits, [in, out] BITMAPINFO* lpbmi, 
            [in] long ColorUse);
            
        [entry("SetGraphicsMode")] 
        long SetGraphicsMode(
            [in] long hdc, 
            [in] long iMode);

        [entry("SetMapMode")] 
        long SetMapMode(
            [in] long hdc, 
            [in] long iMode);

        [entry("SetMiterLimit")]
        long SetMiterLimit(
            [in] long hdc, 
            [in] float limit, 
            [in, out] float* old);
            
        [entry("SetPixel")]
        long SetPixel(
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in] long color);
            
        [entry("SetPixelV")]
        long SetPixelV(
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in] long color);
            
        [entry("SetPolyFillMode")]
        long SetPolyFillMode(
            [in] long hdc, 
            [in] long mode);
            
        [entry("SetRectRgn")]
        long SetRectRgn(
            [in] long hrgn, 
            [in] long Left, 
            [in] long Top, 
            [in] long Right, 
            [in] long Bottom);
            
        [entry("SetROP2")]
        long SetROP2(
            [in] long hdc, 
            [in] long rop2);
            
        [entry("SetStretchBltMode")]
        long SetStretchBltMode(
            [in] long hdc, 
            [in] long mode);
            
        [entry("SetTextAlign")]
        long SetTextAlign(
            [in] long hdc, 
            [in] long align);
            
        [entry("SetTextCharacterExtra")]
        long SetTextCharacterExtra(
            [in] long hdc, 
            [in] long extra);
            
        [entry("SetTextColor")]
        long SetTextColor(
            [in] long hdc, 
            [in] long color);
            
        [entry("SetTextJustification")]
        long SetTextJustification(
            [in] long hdc, 
            [in] long extra, 
            [in] long count);
            
        [entry("SetViewportExtEx")]
        long SetViewportExtEx( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in, out] GDI_SIZE* lpsz);
            
        [entry("SetViewportOrgEx")]
        long SetViewportOrgEx( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in, out] GDI_POINT* lppt);
            
        [entry("SetWindowExtEx")]
        long SetWindowExtEx( 
            [in] long hdc, 
            [in] long x, 
            [in] long y, 
            [in, out] GDI_SIZE* lpsz);
            
        [entry("SetWindowOrgEx")]
        long SetWindowOrgEx(
            [in] long hdc, 
            [in] long X, 
            [in] long Y, 
            [in, out] GDI_POINT* lppt);

        [entry("SetWorldTransform")]
        long SetWorldTransform(
            [in] long hdc, 
            [in, out] XFORM* lpXform);

        [entry("StretchBlt")]
        long StretchBlt(
            [in] long hdcDest, 
            [in] long xDest, 
            [in] long yDest, 
            [in] long wDest, 
            [in] long hDest, 
            [in] long hdcSrc, 
            [in] long xSrc, 
            [in] long ySrc, 
            [in] long wSrc, 
            [in] long hSrc, 
            [in] long rop);
            
        [entry("StretchDIBits")]
        long StretchDIBits(
            [in] long hdc, 
            [in] long xDest, 
            [in] long yDest, 
            [in] long DestWidth, 
            [in] long DestHeight, 
            [in] long xSrc, 
            [in] long ySrc, 
            [in] long SrcWidth, 
            [in] long SrcHeight,
            [in] long lpBits, 
            [in, out] BITMAPINFO* lpbmi, 
            [in] long iUsage, 
            [in] long rop);
            
        [entry("StrokeAndFillPath")]
        long StrokeAndFillPath(
            [in] long hdc);
            
        [entry("StrokePath")]
        long StrokePath(
            [in] long hdc);
            
        [entry("TextOutW")]
        long TextOut(
            [in] long hdc,           
            [in] long nXStart,
            [in] long nYStart,       
            [in] long lpString,
            [in] long cbString);

        [entry("TransparentBlt")]
        long TransparentBlt(
            [in] long hdcDest,
            [in] long xoriginDest, 
            [in] long yoriginDest, 
            [in] long wDest, 
            [in] long hDest, 
            [in] long hdcSrc,
            [in] long xoriginSrc, 
            [in] long yoriginSrc, 
            [in] long wSrc, 
            [in] long hSrc, 
            [in] long crTransparent);

        [entry("WidenPath")]
        long WidenPath(
            [in] long hdc);
            
    };

    [dllname("kernel32")]
    module Kernel32
    {

        [entry("CloseHandle")]
        long CloseHandle( 
            [in] long hObject);

        [entry("CreateTimerQueue")]
        long CreateTimerQueue();

        [entry("CreateTimerQueueTimer")]
        long CreateTimerQueueTimer(
            [in] long phNewTimer,
            [in] long hTimerQueue,
            [in] long pCallback,
            [in] long Parameter,
            [in] long DueTime,
            [in] long Period,
            [in] long Flags);

        [entry("CreateWaitableTimerA")]
        long CreateWaitableTimer(
            [in] long lpSemaphoreAttributes,
            [in] long bManualReset,
            [in] LPSTR lpName);
    
        [entry("DeleteTimerQueueEx")]
        long DeleteTimerQueueEx(
            [in] long hTimerQueue,
            [in] long hCompletionEvent);

        [entry("DeleteTimerQueueTimer")]
        long DeleteTimerQueueTimer(
            [in] long hTimerQueue,
            [in] long hTimer,
            [in] long CompletionEvent);

        [entry("DuplicateHandle")]
        long DuplicateHandle(
            [in] long hSourceProcessHandle,
            [in] long hSourceHandle,
            [in] long hTargetProcessHandle,
            [in] long lpTargetHandle,
            [in] long dwDesiredAccess,
            [in] long bInheritHandle,
            [in] long dwOptions);

        [entry("FileTimeToLocalFileTime")]
        long FileTimeToLocalFileTime(
            [in, out] CURRENCY* lpFileTime, 
            [in, out] CURRENCY* lpLocalFileTime);
                
        [entry("FileTimeToSystemTime")]
        long FileTimeToSystemTime(
            [in, out] CURRENCY* lpFileTime, 
            [in, out] SYSTEMTIME* lpSystemTime);

        [entry("GetCommandLineW")]
            long GetCommandLine();
            
        [entry("GetCurrentProcess")]
        long GetCurrentProcess();

        [entry("GetCurrentThread")]
        long GetCurrentThread();

        [entry("GetCurrentThreadId")]
        long GetCurrentThreadId();

        [entry("GetLastError")]
        long GetLastError();

        [entry("GetProcessTimes")]
        long GetProcessTimes(
            [in] long hProcess,
            [in] CURRENCY* lpCreationTime,
            [in] CURRENCY* lpExitTime,
            [in] CURRENCY* lpKernelTime,
            [in] CURRENCY* lpUserTime);

        [entry("GetSystemInfo")]
        void GetSystemInfo(
            [in, out] SYSTEM_INFO* lpSystemInfo);

        [entry("GetSystemTime")]
        void GetSystemTime(
            [in, out] SYSTEMTIME* lpSystemTime);

        [entry("GetSystemTimeAsFileTime")]
        void GetSystemTimeAsFileTime(
            [in, out] CURRENCY* lpFileTime);

        [entry("GetThreadPriority")]
        long GetThreadPriority( 
            [in] long hThread);

        [entry("GetTimeZoneInformation")]
        long GetTimeZoneInformation(
            [in, out] TIME_ZONE_INFORMATION* lpTimeZoneInformation);

        [entry("LocalFileTimeToFileTime")]
        long LocalFileTimeToFileTime(
            [in, out] CURRENCY* lpLocalFileTime, 
            [in, out] CURRENCY* lpFileTime);
                
        [entry("lstrlenW")]
        long lstrlenW(
            [in] long lpString);

        [entry("QueueUserAPC")]
        long QueueUserAPC(
            [in] long pfnAPC,
            [in] long hThread,
            [in] long dwData);

        [entry("QueryPerformanceFrequency")]
        long QueryPerformanceFrequency(
            [in, out] CURRENCY *lpFrequency);

        [entry("QueryPerformanceCounter")]
        long QueryPerformanceCounter(
            [in, out] CURRENCY *lpPerformanceCount);

        [entry("RtlMoveMemory")]
        void CopyMemory(
            [in] long lpDestination, 
            [in] long lpSource, 
            [in] long length);

        [entry("RtlZeroMemory")]
        void ZeroMemory(
            [in] long lpDest, 
            [in] long numBytes);

        [entry("SetThreadPriority")]
        long SetThreadPriority( 
            [in] long hThread,
            [in] long nPriority);

        [entry("SetWaitableTimer")]
        long SetWaitableTimer(
            [in] long hTimer, 
            [in, out] CURRENCY* lpDueTime, 
            [in] long lPeriod, 
            [in] long pfnCompletionRoutine, 
            [in] long lpArgToCompletionRoutine, 
            [in] long fResume);

        [entry("SleepEx")]
        long SleepEx(
            [in] long dwMilliseconds,
            [in] long bAlertable
        );

        [entry("SystemTimeToFileTime")]
        long SystemTimeToFileTime(
            [in, out] SYSTEMTIME* lpSystemTime, 
            [in, out] CURRENCY* lpFileTime);

        [entry("SystemTimeToTzSpecificLocalTime")]
        long SystemTimeToTzSpecificLocalTime(
            [in, out] TIME_ZONE_INFORMATION* lpTimeZoneInformation , 
            [in, out] SYSTEMTIME* lpUniversalTime, 
            [in, out] SYSTEMTIME* lpLocalTime);

        [entry("TerminateProcess")]
        bool TerminateProcess(
            [in] long hProcess,
            [in] long exitCode);

        [entry("TzSpecificLocalTimeToSystemTime")]
        long TzSpecificLocalTimeToSystemTime(
            [in, out] TIME_ZONE_INFORMATION* lpTimeZoneInformation, 
            [in, out] SYSTEMTIME* lpLocalTime, 
            [in, out] SYSTEMTIME* lpUniversalTime);

        [entry("VirtualProtect")]
        long VirtualProtect(
            [in] long lpAddress, 
            [in] long dwSize, 
            [in] long flNewProtect, 
            [in, out] long* lpflOldProtect);

    };

    //module misc {
    //    const double PI = 3.14159265358979;
    //};

    [dllname("msimg32")]
    module msimg32
    {
        
        [entry("GradientFill")]
        long GradientFill( 
            [in] long hDC,
            [in, out] TRIVERTEX* pVertices,
            [in] long numVertices,
            [in] long pMesh,
            [in] long numMesh,
            [in] long dwMode);

    };

    [dllname("ole32")]
    module Ole32
    {
        
        [entry("CoCreateGuid")]
        long CoCreateGuid( 
            [in, out] GUIDStruct* pGUID);

        [entry("StringFromGUID2")]
        long StringFromGUID2( 
            [in, out] GUIDStruct* rguid, 
            [in, out] GUIDString* lpsz, 
            [in] long cchMax);

    };

    [dllname("shfolder")]
    module shfolder
    {

        [entry("SHGetFolderPathA")]
        long SHGetFolderPath(
            [in] long hwndOwner, 
            [in] long nFolder, 
            [in] long hToken, 
            [in] long dwFlags, 
            [in] LPSTR pszPath);

    };

    [dllname("user32")]
    module User32
    {

        [entry("BeginPaint")]
        long BeginPaint(
            [in] long hwnd,
            [in, out] PAINTSTRUCT* lpPaint);

        [entry("EndPaint")]
        long EndPaint(
            [in] long hwnd,
            [in, out] PAINTSTRUCT* lpPaint);

        [entry("CallWindowProcW")]
        long CallWindowProc( 
            [in] long lpPrevWndFunc, 
            [in] long hWnd, 
            [in] long Msg, 
            [in] long wParam, 
            [in] long lParam);

        [entry("CopyRect")]
        long CopyRect(
            [in, out] GDI_RECT* lprcDst,
            [in, out] GDI_RECT* lprcSrc);

        [entry("DefWindowProcW")]
        long DefWindowProc(
            [in] long hWnd,
            [in] long Msg,
            [in] long wParam,
            [in] long lParam);

        [entry("DestroyCursor")]
        long DestroyCursor(
            [in] long hCursor);

        [entry("DestroyIcon")]
        long DestroyIcon(
            [in] long hIcon);

        [entry("DrawAnimatedRects")]
        long DrawAnimatedRects(
            [in] long hwnd,
            [in] int idAni,
            [in, out] GDI_RECT* lprcFrom,
            [in, out] GDI_RECT* lprcTo);

        [entry("DrawCaption")]
        long DrawCaption(
            [in] long hwnd,
            [in] long hdc,
            [in, out] GDI_RECT* lprect,
            [in] long flags);

        [entry("DrawEdge")]
        long DrawEdge(
            [in] long hdc,
            [in, out] GDI_RECT* qrc,
            [in] long edge,
            [in] long grfFlags);

        [entry("DrawFocusRect")]
        Long DrawFocusRect(
            [in] long hDC,
            [in, out] GDI_RECT* lpRect);

        [entry("DrawFrameControl")]
        long DrawFrameControl(
            [in] long hdc,
            [in, out] GDI_RECT* lprect,
            [in] long uType,
            [in] long uState);

        [entry("DrawTextW")]
        long DrawText(
            [in] long hDC,
            [in] long lpString, 
            [in] long nCount,
            [in, out] GDI_RECT* lpRect,
            [in] long uFormat);

        [entry("DrawTextExW")]
        long DrawTextEx(
            [in] long hDC,
            [in] long lpString, 
            [in] long nCount,
            [in, out] GDI_RECT* lpRect,
            [in] long uFormat,
            [in, out] DRAWTEXTPARAMS* lpDTParams);

        [entry("EqualRect")]
        long EqualRect(
            [in, out] GDI_RECT* lprc1,
            [in, out] GDI_RECT* lprc2);

        [entry("FillRect")]
        long FillRect(
            [in] long hDC,
            [in, out] GDI_RECT* lpRect,
            [in] long hBrush);

        [entry("FindWindowW")]
        long FindWindow(
            [in] LPWSTR Class,
            [in] LPWSTR Title);

        [entry("FindWindowExW")]
        long FindWindowEx(
            [in] long hWndParent,
            [in] long hWndChildAfter,
            [in] LPWSTR Class,
            [in] LPWSTR Window);

        [entry("FrameRect")]
        long FrameRect(
            [in] long hDC,
            [in, out] GDI_RECT* lpRect,
            [in] long hBrush);

        [entry("GetAsyncKeyState")]
        short GetAsyncKeyState(
            [in] long vKey);

        [entry("GetClientRect")]
        Long GetClientRect(          
            [in] long hWnd,
            [in, out] GDI_RECT* lpRect);

        [entry("GetCursorPos")]
        Long GetCursorPos(
            [in, out] GDI_POINT *position);
        
        [entry("GetDC")]
        long GetDC( 
            [in] long hWnd);
            
        [entry("GetDCEx")]
        long getDCEx( 
            [in] long hWnd,
            [in] long hrgnclip, 
            [in] long fdwOptions);

        [entry("GetDoubleClickTime")]
        long GetDoubleClickTime ();

        [entry("GetKeyState")]
        short GetKeyState(
            [in] long vKey);

        [entry("GetSysColor")]
        long GetSysColor(
            [in] long nIndex);
            
        [entry("GetSystemMetrics")]
        long GetSystemMetrics( 
            [in] long nIndex);

        [entry("GetTabbedTextExtentW")]
        long GetTabbedTextExtent( 
            [in] long hDC,
            [in] long lpString, 
            [in] long nCount, 
            [in] long nTabPositions, 
            [in] long lpnTabStopPositions);

        [entry("GetUpdateRect")]
        long GetUpdateRect(
            [in] long hWnd,
            [in, out] GDI_RECT* lpRect,
            [in] long bErase);

        [entry("GetWindow")]
        long GetWindow(
            [in] long hWnd, 
            [in] long wCmd);

        [entry("GetWindowLongA")]
        long GetWindowLong( 
            [in] long hWnd, 
            [in] long nIndex);

        [entry("GetWindowRect")]
        long GetWindowRect ( 
            [in] long hWnd,
            [in,out] GDI_RECT* lpRect);

        [entry("GetWindowRgn")]
        long GetWindowRgn(
            [in] long hWnd,
            [in] long hRgn);
            
        [entry("GetWindowTextW")]
        long GetWindowText(
            [in] long hWnd, 
            [in] long pBuffer, 
            [in] long pMaxChars);
            
        [entry("InflateRect")]
        long InflateRect(     
            [in, out] GDI_RECT* lpRect,
            [in] long dx,
            [in] long dy);

        [entry("IntersectRect")]
        long IntersectRect(
            [in, out] GDI_RECT* lprcDst,
            [in, out] GDI_RECT* lprcSrc1,
            [in, out] GDI_RECT* lprcSrc2);

        [entry("InvalidateRect")]
        long InvalidateRect(
            [in] long hWnd, 
            [in, out] GDI_RECT* lpRect,
            [in] long bErase);
            
        [entry("IsRectEmpty")]
        long IsRectEmpty(
            [in, out] GDI_RECT* lprc);

        [entry("KillTimer")]
        long KillTimer(
            [in] long hwnd, 
            [in] long nIDEvent);

        [entry("LoadImageW")]
        long LoadImage(
            [in] long hInst,
            [in] long lpszName,
            [in] long type,
            [in] long cx,
            [in] long cy,
            [in] long fuLoad);

        [entry("LockWindowUpdate")]
        long LockWindowUpdate( 
            [in] long hwnd);

        [entry("MapWindowPoints")]
        long MapWindowPoints(
          [in] long hWndFrom,
          [in] long hWndTo,
          [in] long lpPoints,
          [in] long cPoints);

        [entry("MoveWindow")]
        long MoveWindow(
            [in] long hwnd, 
            [in] long x, 
            [in] long y, 
            [in] long nWidth, 
            [in] long nHeight, 
            [in] long bRepaint);

        [entry("MsgWaitForMultipleObjects")]
        long MsgWaitForMultipleObjects(
            [in] long nCount, 
            [in, out] long* pHandles, 
            [in] long fWaitAll, 
            [in] long dwMilliseconds, 
            [in] long dwWakeMask);

        [entry("OffsetRect")]
        long OffsetRect(
            [in, out] GDI_RECT* lpRect,
            [in] long dx,
            [in] long dy);

        [entry("PostMessageA")] 
        long PostMessage (
            [in] long hWnd, 
            [in] long wMsg, 
            [in] long wParam, 
            [in] long lParam);
    
        [entry("PtInRect")] 
        long PtInRect(
            [in, out] GDI_RECT* rect,
            [in] long x,
            [in] long y);

        [entry("RedrawWindow")]
        long RedrawWindow(
            [in] long hWnd, 
            [in] long lprcUpdate,
            [in] long hrgnUpdate,
            [in] long flags);

        [entry("ReleaseCapture")]
        long ReleaseCapture ();

        [entry("ReleaseDC")]
        long ReleaseDC(
            [in] long hWnd,
            [in] long hDC);

        [entry("ScreenToClient")]
        long ScreenToClient(
          [in] long hWnd,
          [in, out] GDI_POINT* lpPoint);

        [entry("SendMessageW")]
        long SendMessage(
            [in] long hWnd,
            [in] long wMsg,
            [in] long wParam,
            [in] long lParam);

        [entry("SendNotifyMessageW")]
        long SendNotifyMessage(
            [in] long hWnd,
            [in] long wMsg,
            [in] long wParam,
            [in] long lParam);

        [entry("SetCapture")]
        long SetCapture ( 
            [in] long hwnd);

        [entry("SetLayeredWindowAttributes")]
        long SetLayeredWindowAttributes( 
            [in] long hWnd,
            [in] long crKey, 
            [in] long bAlpha, 
            [in] long dwFlags);

        [entry("SetClassLongW")]
        long SetClassLong(
            [in] long hWnd,
            [in] long nIndex,
            [in] long dwNewLong);

        [entry("SetClassLongPtrW")]
        long SetClassLongPtr(
            [in] long hWnd,
            [in] long nIndex,
            [in] long dwNewLong);

        [entry("SetParent")]
        long SetParent(
            [in] long hWndChild,
            [in] long hWndNewParent);

        [entry("SetRect")]
        long SetRect(
            [in, out] GDI_RECT* lprc,
            [in] long xLeft,
            [in] long yTop,
            [in] long xRight,
            [in] long yBottom);

        [entry("SetRectEmpty")]
        long SetRectEmpty(
            [in, out] GDI_RECT* lprc);

        [entry("SetTimer")]
        long SetTimer(
            [in] long hwnd, 
            [in] long nIDEvent, 
            [in] long uElapse, 
            [in] long lpTimerFunc);

        [entry("SetWindowLongA")]
        long SetWindowLong( 
            [in] long hWnd, 
            [in] long nIndex, 
            [in] long dwNewLong);
                
        [entry("SetWindowPos")]
        long SetWindowPos(
            [in] long hWnd,
            [in] long hWndInsertAfter,
            [in] long X,
            [in] long Y,
            [in] long cx,
            [in] long cy,
            [in] long uFlags);

        [entry("SetWindowRgn")]
        long SetWindowRgn(
            [in] long hWnd,
            [in] long hRgn,
            [in] long bRedraw);

        [entry("SetWindowTextW")]
        long SetWindowText(
            [in] long hWnd, 
            [in] long pBuffer);

        [entry("SubtractRect")]
        long SubtractRect(
            [in, out] GDI_RECT* lprcDst,
            [in, out] GDI_RECT* lprcSrc1,
            [in, out] GDI_RECT* lprcSrc2);

        [entry("SystemParametersInfoW")]
        long SystemParametersInfo ( 
            [in] long uAction, 
            [in] long uiParam, 
            [in] long pvParam, 
            [in] long fWinIni);

        [entry("TabbedTextOutA")]
        long TabbedTextOut(
            [in] long hDC,
            [in] long X,
            [in] long Y,
            [in] long lpString,
            [in] long nCount,
            [in] long nTabPositions,
            [in] long lpnTabStopPositions,
            [in] long nTabOrigin
        );

        [entry("TrackMouseEvent")]
        long TrackMouseEvent( 
             [in, out] TRACKMOUSEEVENTSTRUCT* lpEventTrack);

        [entry("UnionRect")]
        long UnionRect(
            [in, out] GDI_RECT* lprcDst,
            [in, out] GDI_RECT* lprcSrc1,
            [in, out] GDI_RECT* lprcSrc2);

    };

    [dllname("uxtheme")]
    module uxtheme
    {

        [entry("SetWindowTheme")]
        long SetWindowTheme(
            [in] long hwnd,
            [in] LPWSTR pszSubAppName,
            [in] LPWSTR pszSubIdList);

    };

    [dllname("winmm")]
    module winmm
    {

        [entry("timeBeginPeriod")]
        long TimeBeginPeriod( 
            [in] long uPeriod);

        [entry("timeEndPeriod")]
        long TimeEndPeriod( 
            [in] long uPeriod);
                
        [entry("timeKillEvent")]
        long TimeKillEvent( 
            [in] long uID);
                
        [entry("timeSetEvent")]
        long TimeSetEvent( 
            [in] long uDelay, 
            [in] long uResolution,
            [in] long lpFunction, 
            [in] long dwUser, 
            [in] long uFlags);
                
        [entry("timeGetDevCaps")]
        long TimeGetDevCaps( 
            [in, out] TIMECAPS *lpTimeCaps, 
            [in] long uSize);
    
    };
    
    [dllname("ws2_32")]
    module ws2_32
    {
    
        [entry("WSAIoctl")]
        long WSAIoctl(
            [in] long s, 
            [in] long dwIoControlCode, 
            [in] long lpvInBuffer,
            [in] long cbInBuffer, 
            [in] long lpvOutBuffer,
            [in] long cbOutBuffer,
            [in, out] long* lpcbBytesReturned,
            [in, out] WSAOVERLAPPED* lpOverlapped,
            [in] long lpCompletionRoutine);

    };
    
    
    module Windows {

        const long AD_COUNTERCLOCKWISE                = 1;
        const long AD_CLOCKWISE                        = 2;

        const long ALTERNATE                         = 1;
        
        const long BM_GETSTATE        = 0x00F2;
        
/* button states */
        const long BST_UNCHECKED      = 0x0000;
        const long BST_CHECKED        = 0x0001;
        const long BST_INDETERMINATE  = 0x0002;
        const long BST_PUSHED         = 0x0004;
        const long BST_FOCUS          = 0x0008;

/* 3D border styles */
        const long BDR_RAISEDOUTER =0x0001;
        const long BDR_SUNKENOUTER =0x0002;
        const long BDR_RAISEDINNER =0x0004;
        const long BDR_SUNKENINNER =0x0008;

        const long BDR_OUTER       =(BDR_RAISEDOUTER | BDR_SUNKENOUTER);
        const long BDR_INNER       =(BDR_RAISEDINNER | BDR_SUNKENINNER);
        const long BDR_RAISED      =(BDR_RAISEDOUTER | BDR_RAISEDINNER);
        const long BDR_SUNKEN      =(BDR_SUNKENOUTER | BDR_SUNKENINNER);


        const long EDGE_RAISED     =(BDR_RAISEDOUTER | BDR_RAISEDINNER);
        const long EDGE_SUNKEN     =(BDR_SUNKENOUTER | BDR_SUNKENINNER);
        const long EDGE_ETCHED     =(BDR_SUNKENOUTER | BDR_RAISEDINNER);
        const long EDGE_BUMP       =(BDR_RAISEDOUTER | BDR_SUNKENINNER);

/* Border flags */
        const long BF_LEFT         =0x0001;
        const long BF_TOP          =0x0002;
        const long BF_RIGHT        =0x0004;
        const long BF_BOTTOM       =0x0008;

        const long BF_TOPLEFT      =(BF_TOP | BF_LEFT);
        const long BF_TOPRIGHT     =(BF_TOP | BF_RIGHT);
        const long BF_BOTTOMLEFT   =(BF_BOTTOM | BF_LEFT);
        const long BF_BOTTOMRIGHT  =(BF_BOTTOM | BF_RIGHT);
        const long BF_RECT         =(BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM);

        const long BF_DIAGONAL     =0x0010;

// For diagonal lines, the BF_RECT flags specify the end point of the
// vector bounded by the rectangle parameter.
        const long BF_DIAGONAL_ENDTOPRIGHT     =(BF_DIAGONAL | BF_TOP | BF_RIGHT);
        const long BF_DIAGONAL_ENDTOPLEFT      =(BF_DIAGONAL | BF_TOP | BF_LEFT);
        const long BF_DIAGONAL_ENDBOTTOMLEFT   =(BF_DIAGONAL | BF_BOTTOM | BF_LEFT);
        const long BF_DIAGONAL_ENDBOTTOMRIGHT  =(BF_DIAGONAL | BF_BOTTOM | BF_RIGHT);


        const long BF_MIDDLE       =0x0800;
        const long BF_SOFT         =0x1000;
        const long BF_ADJUST       =0x2000;
        const long BF_FLAT         =0x4000;
        const long BF_MONO         =0x8000;

        const long BS_DIBPATTERN                     = 5;
        const long BS_DIBPATTERN8X8                 = 8;
        const long BS_DIBPATTERNPT                     = 6;
        const long BS_HATCHED                         = 2;
        const long BS_NULL                            = 1;
        const long BS_HOLLOW                        = BS_NULL;
        const long BS_PATTERN                         = 3;
        const long BS_PATTERN8X8                     = 7;
        const long BS_SOLID                         = 0;

        const long CB_ERR                            = -1;

        const long CB_FINDSTRING                    = 0x14C;
        const long CB_SELECTSTRING                    = 0x14D;
        const long CB_SETCURSEL                        = 0x14E;
        const long CB_SETDROPPEDWIDTH                = 0x160;
        const long CB_SETHORIZONTALEXTENT            = 0x15E;
        const long CB_SETMINVISIBLE                 = 0x1701;

        const long CCM_SETBKCOLOR          = 0x2001; // lParam is bkColor
        const long  ANSI_CHARSET            = 0;
        const long  DEFAULT_CHARSET         = 1;
        const long  SYMBOL_CHARSET          = 2;
        const long  SHIFTJIS_CHARSET        = 128;
        const long  HANGEUL_CHARSET         = 129;
        const long  HANGUL_CHARSET          = 129;
        const long  GB2312_CHARSET          = 134;
        const long  CHINESEBIG5_CHARSET     = 136;
        const long  OEM_CHARSET             = 255;
        const long  JOHAB_CHARSET           = 130;
        const long  HEBREW_CHARSET          = 177;
        const long  ARABIC_CHARSET          = 178;
        const long  GREEK_CHARSET           = 161;
        const long  TURKISH_CHARSET         = 162;
        const long  VIETNAMESE_CHARSET      = 163;
        const long  THAI_CHARSET            = 222;
        const long  EASTEUROPE_CHARSET      = 238;
        const long  RUSSIAN_CHARSET         = 204;

        const long  MAC_CHARSET             = 77;
        const long  BALTIC_CHARSET          = 186;

        const long CLIP_DEFAULT_PRECIS     = 0;
        const long CLIP_CHARACTER_PRECIS   = 1;
        const long CLIP_STROKE_PRECIS      = 2;
        const long CLIP_MASK               = 0xf;
        const long CLIP_LH_ANGLES          = 0x10;
        const long CLIP_TT_ALWAYS          = 0x20;
        const long CLIP_DFA_DISABLE        = 0x40;
        const long CLIP_EMBEDDED           = 0x80;

        const long CLR_INVALID                 = 0xFFFFFFFF;
        
        const long COLOR_ACTIVEBORDER = 10;
        const long COLOR_ACTIVECAPTION = 2;
        const long COLOR_APPWORKSPACE = 12;
        const long COLOR_BACKGROUND = 1;
        const long COLOR_BTNFACE = 15;
        const long COLOR_BTNHIGHLIGHT = 20;
        const long COLOR_BTNSHADOW = 16;
        const long COLOR_BTNTEXT = 18;
        const long COLOR_CAPTIONTEXT = 9;
        const long COLOR_GRAYTEXT = 17;
        const long COLOR_HIGHLIGHT = 13;
        const long COLOR_HIGHLIGHTTEXT = 14;
        const long COLOR_INACTIVEBORDER = 11;
        const long COLOR_INACTIVECAPTION = 3;
        const long COLOR_INACTIVECAPTIONTEXT = 19;
        const long COLOR_MENU = 4;
        const long COLOR_MENUTEXT = 7;
        const long COLOR_SCROLLBAR = 0;
        const long COLOR_WINDOW = 5;
        const long COLOR_WINDOWFRAME = 6;
        const long COLOR_WINDOWTEXT = 8;

/* flags for DrawCaption */
        const long DC_ACTIVE           =0x0001;
        const long DC_SMALLCAP         =0x0002;
        const long DC_ICON             =0x0004;
        const long DC_TEXT             =0x0008;
        const long DC_INBUTTON         =0x0010;
        const long DC_GRADIENT         =0x0020;
        const long DC_BUTTONS          =0x1000;

        const long DCB_DISABLE                         = 0x8;
        const long DCB_ENABLE                         = 0x4;
        const long DCB_RESET                         = 0x1;

/* GetDCEx() flags */
        const long  DCX_WINDOW           = 0x00000001;
        const long  DCX_CACHE            = 0x00000002;
        const long  DCX_NORESETATTRS     = 0x00000004;
        const long  DCX_CLIPCHILDREN     = 0x00000008;
        const long  DCX_CLIPSIBLINGS     = 0x00000010;
        const long  DCX_PARENTCLIP       = 0x00000020;
        const long  DCX_EXCLUDERGN       = 0x00000040;
        const long  DCX_INTERSECTRGN     = 0x00000080;
        const long  DCX_EXCLUDEUPDATE    = 0x00000100;
        const long  DCX_INTERSECTUPDATE  = 0x00000200;
        const long  DCX_LOCKWINDOWUPDATE = 0x00000400;

        const long  DCX_VALIDATE         = 0x00200000;
        
        
/* flags for DrawFrameControl */

        const long DFC_CAPTION             =1;
        const long DFC_MENU                =2;
        const long DFC_SCROLL              =3;
        const long DFC_BUTTON              =4;
        const long DFC_POPUPMENU           =5;

        const long DFCS_CAPTIONCLOSE       =0x0000;
        const long DFCS_CAPTIONMIN         =0x0001;
        const long DFCS_CAPTIONMAX         =0x0002;
        const long DFCS_CAPTIONRESTORE     =0x0003;
        const long DFCS_CAPTIONHELP        =0x0004;

        const long DFCS_MENUARROW          =0x0000;
        const long DFCS_MENUCHECK          =0x0001;
        const long DFCS_MENUBULLET         =0x0002;
        const long DFCS_MENUARROWRIGHT     =0x0004;
        const long DFCS_SCROLLUP           =0x0000;
        const long DFCS_SCROLLDOWN         =0x0001;
        const long DFCS_SCROLLLEFT         =0x0002;
        const long DFCS_SCROLLRIGHT        =0x0003;
        const long DFCS_SCROLLCOMBOBOX     =0x0005;
        const long DFCS_SCROLLSIZEGRIP     =0x0008;
        const long DFCS_SCROLLSIZEGRIPRIGHT =0x0010;

        const long DFCS_BUTTONCHECK        =0x0000;
        const long DFCS_BUTTONRADIOIMAGE   =0x0001;
        const long DFCS_BUTTONRADIOMASK    =0x0002;
        const long DFCS_BUTTONRADIO        =0x0004;
        const long DFCS_BUTTON3STATE       =0x0008;
        const long DFCS_BUTTONPUSH         =0x0010;

        const long DFCS_INACTIVE           =0x0100;
        const long DFCS_PUSHED             =0x0200;
        const long DFCS_CHECKED            =0x0400;

        const long DFCS_TRANSPARENT        =0x0800;
        const long DFCS_HOT                =0x1000;

        const long DFCS_ADJUSTRECT         =0x2000;
        const long DFCS_FLAT               =0x4000;
        const long DFCS_MONO               =0x8000;

        const long DIB_PAL_COLORS                     = 1;
        const long DIB_RGB_COLORS                     = 0;

        const long DT_TOP                         = 0x00000000;
        const long DT_LEFT                        = 0x00000000;
        const long DT_CENTER                      = 0x00000001;
        const long DT_RIGHT                       = 0x00000002;
        const long DT_VCENTER                     = 0x00000004;
        const long DT_BOTTOM                      = 0x00000008;
        const long DT_WORDBREAK                   = 0x00000010;
        const long DT_SINGLELINE                  = 0x00000020;
        const long DT_EXPANDTABS                  = 0x00000040;
        const long DT_TABSTOP                     = 0x00000080;
        const long DT_NOCLIP                      = 0x00000100;
        const long DT_EXTERNALLEADING             = 0x00000200;
        const long DT_CALCRECT                    = 0x00000400;
        const long DT_NOPREFIX                    = 0x00000800;
        const long DT_INTERNAL                    = 0x00001000;
        const long DT_EDITCONTROL                 = 0x00002000;
        const long DT_PATH_ELLIPSIS               = 0x00004000;
        const long DT_END_ELLIPSIS                = 0x00008000;
        const long DT_MODIFYSTRING                = 0x00010000;
        const long DT_RTLREADING                  = 0x00020000;
        const long DT_WORD_ELLIPSIS               = 0x00040000;
        const long DT_NOFULLWIDTHCHARBREAK        = 0x00080000;
        const long DT_HIDEPREFIX                  = 0x00100000;
        const long DT_PREFIXONLY                  = 0x00200000;

        const long DUPLICATE_CLOSE_SOURCE              = 0x00000001;
        const long DUPLICATE_SAME_ACCESS               = 0x00000002;  

        const long ERROR_ALREADY_EXISTS           = 183;
        const long ERROR_NO_MORE_ITEMS            = 259;
        const long ERROR_SUCCESS                  = 0;

        const long ETO_OPAQUE                        = 0x0002;
        const long ETO_CLIPPED                        = 0x0004;
        const long ETO_GLYPH_INDEX                    = 0x0010;
        const long ETO_RTLREADING                    = 0x0080;
        const long ETO_NUMERICSLOCAL                = 0x0400;
        const long ETO_NUMERICSLATIN                = 0x0800;
        const long ETO_IGNORELANGUAGE                = 0x1000;
        const long ETO_PDY                            = 0x2000;

/* Font Families */
        const long FF_DONTCARE         = 0x00;  /* Don't care or don't know. */
        const long FF_ROMAN            = 0x10;  /* Variable stroke width, serifed. */
                                                /* Times Roman, Century Schoolbook, etc. */
        const long FF_SWISS            = 0x20;  /* Variable stroke width, sans-serifed. */
                                                /* Helvetica, Swiss, etc. */
        const long FF_MODERN           = 0x30;  /* Constant stroke width, serifed or sans-serifed. */
                                                /* Pica, Elite, Courier, etc. */
        const long FF_SCRIPT           = 0x40;  /* Cursive, etc. */
        const long FF_DECORATIVE       = 0x50;  /* Old English, etc. */

/* Font Weights */
        const long  FW_DONTCARE         = 0;
        const long  FW_THIN             = 100;
        const long  FW_EXTRALIGHT       = 200;
        const long  FW_LIGHT            = 300;
        const long  FW_NORMAL           = 400;
        const long  FW_MEDIUM           = 500;
        const long  FW_SEMIBOLD         = 600;
        const long  FW_BOLD             = 700;
        const long  FW_EXTRABOLD        = 800;
        const long  FW_HEAVY            = 900;

        const long GCLP_MENUNAME       =-8;
        const long GCLP_HBRBACKGROUND  =-10;
        const long GCLP_HCURSOR        =-12;
        const long GCLP_HICON          =-14;
        const long GCLP_HMODULE        =-16;
        const long GCLP_WNDPROC        =-24;
        const long GCLP_HICONSM        =-34;


        const long GM_ADVANCED                        = 2;
        const long GM_COMPATIBLE                    = 1;
        const long GM_LAST                            = 2;

        const long GRADIENT_FILL_RECT_H                = 0;
        const long GRADIENT_FILL_RECT_V               = 1;
        const long GRADIENT_FILL_TRIANGLE             = 2;

        const long GW_OWNER                           = 4;

        const long GWL_WNDPROC                        = -4;
        const long GWL_HINSTANCE                    = -6;
        const long GWL_longPARENT                    = -8;
        const long GWL_STYLE                        = -16;
        const long GWL_EXSTYLE                        = -20;
        const long GWL_USERDATA                        = -21;
        const long GWL_ID                            = -12;

        const long HGDI_ERROR                         = 0xFFFF;
        
        const long HKEY_LOCAL_MACHINE                 = 0x80000002;

        const long HOVER_DEFAULT                     = 0xFFFFFFFF;

        const long HS_BDIAGONAL                     = 3;
        const long HS_BDIAGONAL1                     = 7;
        const long HS_CROSS                         = 4;
        const long HS_DIAGCROSS                     = 5;
        const long HS_FDIAGONAL                     = 2;
        const long HS_HORIZONTAL                     = 0;
        const long HS_VERTICAL                         = 1;

        const long HWND_TOP                            = 0;
        const long HWND_BOTTOM                        = 1;
        const long HWND_TOPMOST                        = -1;
        const long HWND_NOTOPMOST                    = -2;

        const long ICC_LISTVIEW_CLASSES   = 0x00000001; // listview, header
        const long ICC_TREEVIEW_CLASSES   = 0x00000002; // treeview, tooltips
        const long ICC_BAR_CLASSES        = 0x00000004; // toolbar, statusbar, trackbar, tooltips
        const long ICC_TAB_CLASSES        = 0x00000008; // tab, tooltips
        const long ICC_UPDOWN_CLASS       = 0x00000010; // updown
        const long ICC_PROGRESS_CLASS     = 0x00000020; // progress
        const long ICC_HOTKEY_CLASS       = 0x00000040; // hotkey
        const long ICC_ANIMATE_CLASS      = 0x00000080; // animate
        const long ICC_WIN95_CLASSES      = 0x000000FF;
        const long ICC_DATE_CLASSES       = 0x00000100; // month picker, date picker, time picker, updown
        const long ICC_USEREX_CLASSES     = 0x00000200; // comboex
        const long ICC_COOL_CLASSES       = 0x00000400; // rebar (coolbar) control
        const long ICC_INTERNET_CLASSES   = 0x00000800;
        const long ICC_PAGESCROLLER_CLASS = 0x00001000; // page scroller
        const long ICC_NATIVEFNTCTL_CLASS = 0x00002000; // native font control
        const long ICC_STANDARD_CLASSES   = 0x00004000;
        const long ICC_LINK_CLASS         = 0x00008000;

        const long IMAGE_BITMAP        =0;
        const long IMAGE_ICON          =1;
        const long IMAGE_CURSOR        =2;

        const long INFINITE                            = 0xFFFF;
        
        const long INVALID_HANDLE_VALUE                = 0xFFFF;

        const long IOC_IN                            = 0x80000000;
        const long IOC_VENDOR                        = 0x18000000;

        const long KEY_ENUMERATE_SUB_KEYS             = Key_Enumerate_Sub_Keys;
        const long KEY_NOTIFY                         = Key_Notify;
        const long KEY_QUERY_VALUE                    = Key_Query_value;
        const long KEY_READ                           = Key_Read;

        const long LB_SELECTSTRING                    = 0x18C;
        const long LB_SETHORIZONTALEXTENT            = 0x194;

        const long LR_DEFAULTCOLOR     =0x0000;
        const long LR_MONOCHROME       =0x0001;
        const long LR_COLOR            =0x0002;
        const long LR_COPYRETURNORG    =0x0004;
        const long LR_COPYDELETEORG    =0x0008;
        const long LR_LOADFROMFILE     =0x0010;
        const long LR_LOADTRANSPARENT  =0x0020;
        const long LR_DEFAULTSIZE      =0x0040;
        const long LR_VGACOLOR         =0x0080;
        const long LR_LOADMAP3DCOLORS  =0x1000;
        const long LR_CREATEDIBSECTION =0x2000;
        const long LR_COPYFROMRESOURCE =0x4000;
        const long LR_SHARED           =0x8000;

        const long LWA_COLORKEY            = 1;
        const long LWA_ALPHA            = 2;
        const long LWA_OPAQUE           = 0xFF;

        const long MAX_PATH             = 260;

        const long MK_CONTROL          =0x0008;
        const long MK_LBUTTON          =0x0001;
        const long MK_MBUTTON          =0x0010;
        const long MK_RBUTTON          =0x0002;
        const long MK_SHIFT            =0x0004;

        const long MM_ANISOTROPIC                     = 8;
        const long MM_HIENGLISH                     = 5;
        const long MM_HIMETRIC                         = 3;
        const long MM_ISOTROPIC                     = 7;
        const long MM_LOENGLISH                     = 4;
        const long MM_LOMETRIC                         = 2;
        const long MM_TEXT                             = 1;
        const long MM_TWIPS                         = 6;
        
        const long MWT_IDENTITY                        = 1;
        const long MWT_LEFTMULTIPLY                    = 2;
        const long MWT_RIGHTMULTIPLY                = 3;

        const long NULLREGION                        = 1;
        const long SIMPLEREGION                        = 2;
        const long COMPLEXREGION                    = 3;

        const long OBJ_BITMAP                         = 7;
        const long OBJ_BRUSH                         = 2;
        const long OBJ_COLORSPACE                      = 14;
        const long OBJ_DC                              = 3;
        const long OBJ_ENHMETADC                       = 12;
        const long OBJ_ENHMETAFILE                     = 13;
        const long OBJ_EXTPEN                          = 11;
        const long OBJ_FONT                         = 6;
        const long OBJ_MEMDC                           = 10;
        const long OBJ_METADC                          = 4;
        const long OBJ_METAFILE                        = 9;
        const long OBJ_PAL                             = 5;
        const long OBJ_PEN                             = 1;
        const long OBJ_REGION                          = 8;

        const long OPAQUE                             = 2;
        const long TRANSPARENT                         = 1;

        const long OUT_DEFAULT_PRECIS          = 0;
        const long OUT_STRING_PRECIS           = 1; 
        const long OUT_CHARACTER_PRECIS        = 2;
        const long OUT_STROKE_PRECIS           = 3;
        const long OUT_TT_PRECIS               = 4;
        const long OUT_DEVICE_PRECIS           = 5;
        const long OUT_RASTER_PRECIS           = 6;
        const long OUT_TT_ONLY_PRECIS          = 7;
        const long OUT_OUTLINE_PRECIS          = 8;
        const long OUT_SCREEN_OUTLINE_PRECIS   = 9;
        const long OUT_PS_ONLY_PRECIS          = 10;

        const long PAGE_NOACCESS                    = 0x01;     
        const long PAGE_READONLY                    = 0x02;
        const long PAGE_READWRITE                    = 0x04;     
        const long PAGE_WRITECOPY                    = 0x08;     
        const long PAGE_EXECUTE                        = 0x10;     
        const long PAGE_EXECUTE_READ                = 0x20;     
        const long PAGE_EXECUTE_READWRITE            = 0x40;     
        const long PAGE_EXECUTE_WRITECOPY            = 0x80;     
        const long PAGE_GUARD                        = 0x100;     
        const long PAGE_NOCACHE                        = 0x200;     
        const long PAGE_WRITECOMBINE                = 0x400;     

        const long DEFAULT_PITCH           = 0;
        const long FIXED_PITCH             = 1;
        const long VARIABLE_PITCH          = 2;

        const long PS_ALTERNATE                     = 8;
        const long PS_COSMETIC                         = 0x0;
        const long PS_DASH                             = 1;
        const long PS_DASHDOT                         = 3;
        const long PS_DASHDOTDOT                     = 4;
        const long PS_DOT                             = 2;
        const long PS_ENDCAP_FLAT                     = 0x200;
        const long PS_ENDCAP_MASK                     = 0xF00;
        const long PS_ENDCAP_ROUND                     = 0x0;
        const long PS_ENDCAP_SQUARE                 = 0x100;
        const long PS_GEOMETRIC                     = 0x10000;
        const long PS_INSIDEFRAME                     = 6;
        const long PS_JOIN_BEVEL                     = 0x1000;
        const long PS_JOIN_MASK                     = 0xF000;
        const long PS_JOIN_MITER                     = 0x2000;
        const long PS_JOIN_ROUND                     = 0x0;
        const long PS_NULL                             = 5;
        const long PS_SOLID                         = 0;
        const long PS_STYLE_MASK                     = 0xF;
        const long PS_TYPE_MASK                     = 0xF0000;
        const long PS_USERSTYLE                     = 7;

        const long PT_CLOSEFIGURE                    = 0x01;
        const long PT_LINETO                        = 0x02;
        const long PT_BEZIERTO                        = 0x04;
        const long PT_MOVETO                        = 0x06;

        const long QS_HOTKEY                      = Qs_Hotkey;
        const long QS_KEY                         = Qs_Key;
        const long QS_MOUSEBUTTON                 = Qs_MouseButton;
        const long QS_MOUSEMOVE                   = Qs_MouseMove;
        const long QS_PAINT                       = Qs_Paint;
        const long QS_POSTMESSAGE                 = Qs_PostMessage;
        const long QS_SENDMESSAGE                 = Qs_SendMessage;
        const long QS_TIMER                       = Qs_Timer;
        const long QS_MOUSE                       = Qs_Mouse;
        const long QS_INPUT                       = Qs_Input;
        const long QS_ALLEVENTS                   = Qs_AllEvents;
        const long QS_ALLINPUT                    = Qs_AllInput;
        const long QS_ALLPOSTMESSAGE                = Qs_AllPostMessage;

        const long DEFAULT_QUALITY         = 0;
        const long DRAFT_QUALITY           = 1;
        const long PROOF_QUALITY           = 2;
        const long NONANTIALIASED_QUALITY  = 3;
        const long ANTIALIASED_QUALITY     = 4;
        const long CLEARTYPE_QUALITY       = 5;
        const long CLEARTYPE_NATURAL_QUALITY       = 6;

/* Binary raster ops */
        const long R2_BLACK            =1;   /*  0       */
        const long R2_NOTMERGEPEN      =2;   /* DPon     */
        const long R2_MASKNOTPEN       =3;   /* DPna     */
        const long R2_NOTCOPYPEN       =4;   /* PN       */
        const long R2_MASKPENNOT       =5;   /* PDna     */
        const long R2_NOT              =6;   /* Dn       */
        const long R2_XORPEN           =7;   /* DPx      */
        const long R2_NOTMASKPEN       =8;   /* DPan     */
        const long R2_MASKPEN          =9;   /* DPa      */
        const long R2_NOTXORPEN        =10;  /* DPxn     */
        const long R2_NOP              =11;  /* D        */
        const long R2_MERGENOTPEN      =12;  /* DPno     */
        const long R2_COPYPEN          =13;  /* P        */
        const long R2_MERGEPENNOT      =14;  /* PDno     */
        const long R2_MERGEPEN         =15;  /* DPo      */
        const long R2_WHITE            =16;  /*  1       */
        const long R2_LAST             =16;

/* Ternary raster operations */
        const long SRCCOPY             =(long)0x00CC0020; /* dest = source                   */
        const long SRCPAINT            =(long)0x00EE0086; /* dest = source OR dest           */
        const long SRCAND              =(long)0x008800C6; /* dest = source AND dest          */
        const long SRCINVERT           =(long)0x00660046; /* dest = source XOR dest          */
        const long SRCERASE            =(long)0x00440328; /* dest = source AND (NOT dest )   */
        const long NOTSRCCOPY          =(long)0x00330008; /* dest = (NOT source)             */
        const long NOTSRCERASE         =(long)0x001100A6; /* dest = (NOT src) AND (NOT dest) */
        const long MERGECOPY           =(long)0x00C000CA; /* dest = (source AND pattern)     */
        const long MERGEPAINT          =(long)0x00BB0226; /* dest = (NOT source) OR dest     */
        const long PATCOPY             =(long)0x00F00021; /* dest = pattern                  */
        const long PATPAINT            =(long)0x00FB0A09; /* dest = DPSnoo                   */
        const long PATINVERT           =(long)0x005A0049; /* dest = pattern XOR dest         */
        const long DSTINVERT           =(long)0x00550009; /* dest = (NOT dest)               */
        const long BLACKNESS           =(long)0x00000042; /* dest = BLACK                    */
        const long WHITENESS           =(long)0x00FF0062; /* dest = WHITE                    */

        const long RDW_INVALIDATE          =0x0001;
        const long RDW_INTERNALPAINT       =0x0002;
        const long RDW_ERASE               =0x0004;

        const long RDW_VALIDATE            =0x0008;
        const long RDW_NOINTERNALPAINT     =0x0010;
        const long RDW_NOERASE             =0x0020;

        const long RDW_NOCHILDREN          =0x0040;
        const long RDW_ALLCHILDREN         =0x0080;

        const long RDW_UPDATENOW           =0x0100;
        const long RDW_ERASENOW            =0x0200;

        const long RDW_FRAME               =0x0400;
        const long RDW_NOFRAME             =0x0800;

        const long READ_CONTROL                   = Read_Control;

        const long RGN_AND                            = 1;
        const long RGN_COPY                            = 5;
        const long RGN_DIFF                            = 4;
        const long RGN_OR                            = 2;
        const long RGN_XOR                            = 3;

        const long S_FALSE                            = 1;
        const long S_OK                                = 0;

        const long STANDARD_RIGHTS_READ           = Standard_Rights_Read;

/* Stock Logical Objects */
        const long  WHITE_BRUSH         = 0;
        const long  LTGRAY_BRUSH        = 1;
        const long  GRAY_BRUSH          = 2;
        const long  DKGRAY_BRUSH        = 3;
        const long  BLACK_BRUSH         = 4;
        const long  NULL_BRUSH          = 5;
        const long  HOLLOW_BRUSH        = 5;
        const long  WHITE_PEN           = 6;
        const long  BLACK_PEN           = 7;
        const long  NULL_PEN            = 8;
        const long  OEM_FIXED_FONT      = 10;
        const long  ANSI_FIXED_FONT     = 11;
        const long  ANSI_VAR_FONT       = 12;
        const long  SYSTEM_FONT         = 13;
        const long  DEVICE_DEFAULT_FONT = 14;
        const long  DEFAULT_PALETTE     = 15;
        const long  SYSTEM_FIXED_FONT   = 16;
        const long DEFAULT_GUI_FONT     = 17;
        const long DC_BRUSH             = 18;
        const long DC_PEN               = 19;

/* stretch modes */
        const long BLACKONWHITE                     = 1;
        const long COLORONCOLOR                     = 3;
        const long HALFTONE                         = 4;
        const long STRETCH_ANDSCANS                 = 1;
        const long STRETCH_DELETESCANS                 = 3;
        const long STRETCH_HALFTONE                 = 4;
        const long STRETCH_ORSCANS                     = 2;
        const long WHITEONBLACK                     = 2;

        const long SYNCHRONIZE                    = Synchronize;

        const long SB_SETBKCOLOR              = 0x2001; // lParam is bkColor

        const long SM_CXSCREEN = 0;
        const long SM_CYSCREEN = 1;
        const long SM_CXVSCROLL = 2;
        const long SM_CYHSCROLL = 3;
        const long SM_CYCAPTION = 4;
        const long SM_CXBORDER = 5;
        const long SM_CYBORDER = 6;
        const long SM_CXDLGFRAME = 7;
        const long SM_CYDLGFRAME = 8;
        const long SM_CYVTHUMB = 9;
        const long SM_CXHTHUMB = 10;
        const long SM_CXICON = 11;
        const long SM_CYICON = 12;
        const long SM_CXCURSOR = 13;
        const long SM_CYCURSOR = 14;
        const long SM_CYMENU = 15;
        const long SM_CXFULLSCREEN = 16;
        const long SM_CYFULLSCREEN = 17;
        const long SM_CYKANJIWINDOW = 18;
        const long SM_MOUSEPRESENT = 19;
        const long SM_CYVSCROLL = 20;
        const long SM_CXHSCROLL = 21;
        const long SM_DEBUG = 22;
        const long SM_SWAPBUTTON = 23;
        const long SM_RESERVED1 = 24;
        const long SM_RESERVED2 = 25;
        const long SM_RESERVED3 = 26;
        const long SM_RESERVED4 = 27;
        const long SM_CXMIN = 28;
        const long SM_CYMIN = 29;
        const long SM_CXSIZE = 30;
        const long SM_CYSIZE = 31;
        const long SM_CXFRAME = 32;
        const long SM_CYFRAME = 33;
        const long SM_CXMINTRACK = 34;
        const long SM_CYMINTRACK = 35;
        const long SM_CXDOUBLECLK = 36;
        const long SM_CYDOUBLECLK = 37;
        const long SM_CXICONSPACING = 38;
        const long SM_CYICONSPACING = 39;
        const long SM_MENUDROPALIGNMENT = 40;
        const long SM_PENWINDOWS = 41;
        const long SM_DBCSENABLED = 42;
        const long SM_CMOUSEBUTTONS = 43;
        const long SM_CXFIXEDFRAME = 7;
        const long SM_CYFIXEDFRAME = 8;
        const long SM_CXSIZEFRAME = 32;
        const long SM_CYSIZEFRAME = 33;
        const long SM_SECURE = 44;
        const long SM_CXEDGE = 45;
        const long SM_CYEDGE = 46;
        const long SM_CXMINSPACING = 47;
        const long SM_CYMINSPACING = 48;
        const long SM_CXSMICON = 49;
        const long SM_CYSMICON = 50;
        const long SM_CYSMCAPTION = 51;
        const long SM_CXSMSIZE = 52;
        const long SM_CYSMSIZE = 53;
        const long SM_CXMENUSIZE = 54;
        const long SM_CYMENUSIZE = 55;
        const long SM_ARRANGE = 56;
        const long SM_CXMINIMIZED = 57;
        const long SM_CYMINIMIZED = 58;
        const long SM_CXMAXTRACK = 59;
        const long SM_CYMAXTRACK = 60;
        const long SM_CXMAXIMIZED = 61;
        const long SM_CYMAXIMIZED = 62;
        const long SM_NETWORK = 63;
        const long SM_CLEANBOOT = 67;
        const long SM_CXDRAG = 68;
        const long SM_CYDRAG = 69;
        const long SM_SHOWSOUNDS = 70;
        const long SM_CXMENUCHECK = 71;           /* Use instead of GetMenuCheckMarkDimensions() */
        const long SM_CYMENUCHECK = 72;
        const long SM_SLOWMACHINE = 73;
        const long SM_MIDEASTENABLED = 74;
        const long SM_MOUSEWHEELPRESENT = 75;
        const long SM_XVIRTUALSCREEN = 76;
        const long SM_YVIRTUALSCREEN = 77;
        const long SM_CXVIRTUALSCREEN = 78;
        const long SM_CYVIRTUALSCREEN = 79;
        const long SM_CMONITORS = 80;
        const long SM_SAMEDISPLAYFORMAT = 81;
        const long SM_IMMENABLED = 82;
        const long SM_CXFOCUSBORDER = 83;
        const long SM_CYFOCUSBORDER = 84;
        const long SM_TABLETPC = 86;
        const long SM_MEDIACENTER = 87;
        const long SM_STARTER = 88;
        const long SM_SERVERR2 = 89;
        const long SM_REMOTESESSION = 0x1000;
        const long SM_SHUTTINGDOWN = 0x2000;
        const long SM_REMOTECONTROL = 0x2001;
        const long SM_CARETBLINKINGENABLED = 0x2002;

        const long SPI_GETBEEP                   = 0x1;
        const long SPI_SETBEEP                   = 0x2;
        const long SPI_GETMOUSE                  = 0x3;
        const long SPI_SETMOUSE                  = 0x4;
        const long SPI_GETBORDER                 = 0x5;
        const long SPI_SETBORDER                 = 0x6;
        const long SPI_GETKEYBOARDSPEED          = 0xA;
        const long SPI_SETKEYBOARDSPEED          = 0xB;
        const long SPI_LANGDRIVER                = 0xC;
        const long SPI_ICONHORIZONTALSPACING     = 0xD;
        const long SPI_GETSCREENSAVETIMEOUT      = 0xE;
        const long SPI_SETSCREENSAVETIMEOUT      = 0xF;
        const long SPI_GETSCREENSAVEACTIVE       = 0x10;
        const long SPI_SETSCREENSAVEACTIVE       = 0x11;
        const long SPI_GETGRIDGRANULARITY        = 0x12;
        const long SPI_SETGRIDGRANULARITY        = 0x13;
        const long SPI_SETDESKWALLPAPER          = 0x14;
        const long SPI_SETDESKPATTERN            = 0x15;
        const long SPI_GETKEYBOARDDELAY          = 0x16;
        const long SPI_SETKEYBOARDDELAY          = 0x17;
        const long SPI_ICONVERTICALSPACING       = 0x18;
        const long SPI_GETICONTITLEWRAP          = 0x19;
        const long SPI_SETICONTITLEWRAP          = 0x1A;
        const long SPI_GETMENUDROPALIGNMENT      = 0x1B;
        const long SPI_SETMENUDROPALIGNMENT      = 0x1C;
        const long SPI_SETDOUBLECLKWIDTH         = 0x1D;
        const long SPI_SETDOUBLECLKHEIGHT        = 0x1E;
        const long SPI_GETICONTITLELOGFONT       = 0x1F;
        const long SPI_SETDOUBLECLICKTIME        = 0x20;
        const long SPI_SETMOUSEBUTTONSWAP        = 0x21;
        const long SPI_SETICONTITLELOGFONT       = 0x22;
        const long SPI_GETFASTTASKSWITCH         = 0x23;
        const long SPI_SETFASTTASKSWITCH         = 0x24;
        const long SPI_SETDRAGFULLWINDOWS        = 0x25;
        const long SPI_GETDRAGFULLWINDOWS        = 0x26;
        const long SPI_GETNONCLIENTMETRICS       = 0x29;
        const long SPI_SETNONCLIENTMETRICS       = 0x2A;
        const long SPI_GETMINIMIZEDMETRICS       = 0x2B;
        const long SPI_SETMINIMIZEDMETRICS       = 0x2C;
        const long SPI_GETICONMETRICS            = 0x2D;
        const long SPI_SETICONMETRICS            = 0x2E;
        const long SPI_SETWORKAREA               = 0x2F;
        const long SPI_GETWORKAREA               = 0x30;
        const long SPI_SETPENWINDOWS             = 0x31;
        const long SPI_GETHIGHCONTRAST           = 0x42;
        const long SPI_SETHIGHCONTRAST           = 0x43;
        const long SPI_GETKEYBOARDPREF           = 0x44;
        const long SPI_SETKEYBOARDPREF           = 0x45;
        const long SPI_GETSCREENREADER           = 0x46;
        const long SPI_SETSCREENREADER           = 0x47;
        const long SPI_GETANIMATION              = 0x48;
        const long SPI_SETANIMATION              = 0x49;
        const long SPI_GETFONTSMOOTHING          = 0x4A;
        const long SPI_SETFONTSMOOTHING          = 0x4B;
        const long SPI_SETDRAGWIDTH              = 0x4C;
        const long SPI_SETDRAGHEIGHT             = 0x4D;
        const long SPI_SETHANDHELD               = 0x4E;
        const long SPI_GETLOWPOWERTIMEOUT        = 0x4F;
        const long SPI_GETPOWEROFFTIMEOUT        = 0x50;
        const long SPI_SETLOWPOWERTIMEOUT        = 0x51;
        const long SPI_SETPOWEROFFTIMEOUT        = 0x52;
        const long SPI_GETLOWPOWERACTIVE         = 0x53;
        const long SPI_GETPOWEROFFACTIVE         = 0x54;
        const long SPI_SETLOWPOWERACTIVE         = 0x55;
        const long SPI_SETPOWEROFFACTIVE         = 0x56;
        const long SPI_SETCURSORS                = 0x57;
        const long SPI_SETICONS                  = 0x58;
        const long SPI_GETDEFAULTINPUTLANG       = 0x59;
        const long SPI_SETDEFAULTINPUTLANG       = 0x5A;
        const long SPI_SETLANGTOGGLE             = 0x5B;
        const long SPI_GETWINDOWSEXTENSION       = 0x5C;
        const long SPI_SETMOUSETRAILS            = 0x5D;
        const long SPI_GETMOUSETRAILS            = 0x5E;
        const long SPI_SETSCREENSAVERRUNNING     = 0x61;
        const long SPI_SCREENSAVERRUNNING         = 0x61;
        const long SPI_GETFILTERKEYS            = 0x32;
        const long SPI_SETFILTERKEYS            = 0x33;
        const long SPI_GETTOGGLEKEYS            = 0x34;
        const long SPI_SETTOGGLEKEYS            = 0x35;
        const long SPI_GETMOUSEKEYS             = 0x36;
        const long SPI_SETMOUSEKEYS             = 0x37;
        const long SPI_GETSHOWSOUNDS            = 0x38;
        const long SPI_SETSHOWSOUNDS            = 0x39;
        const long SPI_GETSTICKYKEYS            = 0x3A;
        const long SPI_SETSTICKYKEYS            = 0x3B;
        const long SPI_GETACCESSTIMEOUT         = 0x3C;
        const long SPI_SETACCESSTIMEOUT         = 0x3D;
        const long SPI_GETSERIALKEYS            = 0x3E;
        const long SPI_SETSERIALKEYS            = 0x3F;
        const long SPI_GETSOUNDSENTRY           = 0x40;
        const long SPI_SETSOUNDSENTRY           = 0x41;
        const long SPI_GETSNAPTODEFBUTTON       = 0x5F;
        const long SPI_SETSNAPTODEFBUTTON       = 0x60;
        const long SPI_GETMOUSEHOVERWIDTH       = 0x62;
        const long SPI_SETMOUSEHOVERWIDTH       = 0x63;
        const long SPI_GETMOUSEHOVERHEIGHT      = 0x64;
        const long SPI_SETMOUSEHOVERHEIGHT      = 0x65;
        const long SPI_GETMOUSEHOVERTIME        = 0x66;
        const long SPI_SETMOUSEHOVERTIME        = 0x67;
        const long SPI_GETWHEELSCROLLLINES      = 0x68;
        const long SPI_SETWHEELSCROLLLINES      = 0x69;
        const long SPI_GETMENUSHOWDELAY         = 0x6A;
        const long SPI_SETMENUSHOWDELAY         = 0x6B;
        const long SPI_GETSHOWIMEUI            = 0x6E;
        const long SPI_SETSHOWIMEUI            = 0x6F;
        const long SPI_GETMOUSESPEED           = 0x70;
        const long SPI_SETMOUSESPEED           = 0x71;
        const long SPI_GETSCREENSAVERRUNNING  = 0x72;
        const long SPI_GETDESKWALLPAPER        = 0x73;
        const long SPI_GETACTIVEWINDOWTRACKING           = 0x1000;
        const long SPI_SETACTIVEWINDOWTRACKING           = 0x1001;
        const long SPI_GETMENUANIMATION                  = 0x1002;
        const long SPI_SETMENUANIMATION                  = 0x1003;
        const long SPI_GETCOMBOBOXANIMATION              = 0x1004;
        const long SPI_SETCOMBOBOXANIMATION              = 0x1005;
        const long SPI_GETLISTBOXSMOOTHSCROLLING         = 0x1006;
        const long SPI_SETLISTBOXSMOOTHSCROLLING         = 0x1007;
        const long SPI_GETGRADIENTCAPTIONS               = 0x1008;
        const long SPI_SETGRADIENTCAPTIONS               = 0x1009;
        const long SPI_GETKEYBOARDCUES                   = 0x100A;
        const long SPI_SETKEYBOARDCUES                   = 0x100B;
        const long SPI_GETMENUUNDERLINES = 0x100A;
        const long SPI_SETMENUUNDERLINES = 0x100B;
        const long SPI_GETACTIVEWNDTRKZORDER             = 0x100C;
        const long SPI_SETACTIVEWNDTRKZORDER             = 0x100D;
        const long SPI_GETHOTTRACKING                    = 0x100E;
        const long SPI_SETHOTTRACKING                    = 0x100F;
        const long SPI_GETMENUFADE                       = 0x1012;
        const long SPI_SETMENUFADE                       = 0x1013;
        const long SPI_GETSELECTIONFADE                  = 0x1014;
        const long SPI_SETSELECTIONFADE                  = 0x1015;
        const long SPI_GETTOOLTIPANIMATION               = 0x1016;
        const long SPI_SETTOOLTIPANIMATION               = 0x1017;
        const long SPI_GETTOOLTIPFADE                    = 0x1018;
        const long SPI_SETTOOLTIPFADE                    = 0x1019;
        const long SPI_GETCURSORSHADOW                   = 0x101A;
        const long SPI_SETCURSORSHADOW                   = 0x101B;
        const long SPI_GETMOUSESONAR                     = 0x101C;
        const long SPI_SETMOUSESONAR                     = 0x101D;
        const long SPI_GETMOUSECLICKLOCK                 = 0x101E;
        const long SPI_SETMOUSECLICKLOCK                 = 0x101F;
        const long SPI_GETMOUSEVANISH                    = 0x1020;
        const long SPI_SETMOUSEVANISH                    = 0x1021;
        const long SPI_GETFLATMENU                       = 0x1022;
        const long SPI_SETFLATMENU                       = 0x1023;
        const long SPI_GETDROPSHADOW                     = 0x1024;
        const long SPI_SETDROPSHADOW                     = 0x1025;
        const long SPI_GETBLOCKSENDINPUTRESETS           = 0x1026;
        const long SPI_SETBLOCKSENDINPUTRESETS           = 0x1027;
        const long SPI_GETUIEFFECTS                      = 0x103E;
        const long SPI_SETUIEFFECTS                      = 0x103F;
        const long SPI_GETFOREGROUNDLOCKTIMEOUT          = 0x2000;
        const long SPI_SETFOREGROUNDLOCKTIMEOUT          = 0x2001;
        const long SPI_GETACTIVEWNDTRKTIMEOUT            = 0x2002;
        const long SPI_SETACTIVEWNDTRKTIMEOUT            = 0x2003;
        const long SPI_GETFOREGROUNDFLASHCOUNT           = 0x2004;
        const long SPI_SETFOREGROUNDFLASHCOUNT           = 0x2005;
        const long SPI_GETCARETWIDTH                     = 0x2006;
        const long SPI_SETCARETWIDTH                     = 0x2007;
        const long SPI_GETMOUSECLICKLOCKTIME             = 0x2008;
        const long SPI_SETMOUSECLICKLOCKTIME             = 0x2009;
        const long SPI_GETFONTSMOOTHINGTYPE              = 0x200A;
        const long SPI_SETFONTSMOOTHINGTYPE              = 0x200B;
        const long SPI_GETFONTSMOOTHINGCONTRAST             = 0x200C;
        const long SPI_SETFONTSMOOTHINGCONTRAST             = 0x200D;
        const long SPI_GETFOCUSBORDERWIDTH               = 0x200E;
        const long SPI_SETFOCUSBORDERWIDTH               = 0x200F;
        const long SPI_GETFOCUSBORDERHEIGHT              = 0x2010;
        const long SPI_SETFOCUSBORDERHEIGHT              = 0x2011;
        const long SPI_GETFONTSMOOTHINGORIENTATION             = 0x2012;
        const long SPI_SETFONTSMOOTHINGORIENTATION             = 0x2013;

        const long SWP_NOSIZE                     = 0x0001;
        const long SWP_NOMOVE                     = 0x0002;
        const long SWP_NOZORDER                   = 0x0004;
        const long SWP_NOREDRAW                   = 0x0008;
        const long SWP_NOACTIVATE                 = 0x0010;
        const long SWP_FRAMECHANGED               = 0x0020;
        const long SWP_SHOWWINDOW                 = 0x0040;
        const long SWP_HIDEWINDOW                 = 0x0080;
        const long SWP_NOCOPYBITS                 = 0x0100;
        const long SWP_NOOWNERZORDER              = 0x0200;
        const long SWP_NOSENDCHANGING             = 0x0400;
        const long SWP_DEFERERASE                 = 0x2000;
        const long SWP_ASYNCWINDOWPOS             = 0x4000;

        const long SIO_KEEPALIVE_VALS                = IOC_IN | IOC_VENDOR | 4;

        const long TA_NOUPDATECP                    = 0;
        const long TA_UPDATECP                        = 1;
        const long TA_LEFT                            = 0;
        const long TA_RIGHT                            = 2;
        const long TA_CENTER                        = 6;
        const long TA_TOP                            = 0;
        const long TA_BOTTOM                        = 8;
        const long TA_BASELINE                        = 24;
        const long TA_RTLREADING                    = 256;

        const long TA_MASK                           = (TA_BASELINE | TA_CENTER | TA_UPDATECP | TA_RTLREADING);

        const long THREAD_BASE_PRIORITY_IDLE        = Thread_Base_Priority_Idle;
        const long THREAD_BASE_PRIORITY_MIN            = Thread_Base_Priority_Min;
        const long THREAD_BASE_PRIORITY_MAX            = Thread_Base_Priority_Max;
        const long THREAD_PRIORITY_IDLE                = Thread_Priority_Idle;
        const long THREAD_PRIORITY_LOWEST            = Thread_Priority_Lowest;
        const long THREAD_PRIORITY_HIGHEST            = Thread_Priority_Highest;
        const long THREAD_PRIORITY_BELOW_NORMAL        = Thread_Priority_Below_Normal;
        const long THREAD_PRIORITY_NORMAL            = Thread_Priority_Normal;
        const long THREAD_PRIORITY_ABOVE_NORMAL        = Thread_Priority_Above_Normal;

        const long TIMERR_NOERROR                 = 0;
        const long TIME_ONESHOT                   = 0;
        const long TIME_PERIODIC                  = 1;

        const long TME_CANCEL                         = 0x80000000;
        const long TME_HOVER                         = 0x1;
        const long TME_LEAVE                         = 0x2;
        const long TME_QUERY                         = 0x40000000;

        const long WSA_IO_PENDING                    = 997;

        const long VK_LBUTTON      = 0x01;
        const long VK_RBUTTON      = 0x02;
        const long VK_CANCEL       = 0x03;
        const long VK_MBUTTON      = 0x04;    /* NOT contiguous with L & RBUTTON */

        const long VK_XBUTTON1     = 0x05;    /* NOT contiguous with L & RBUTTON */
        const long VK_XBUTTON2     = 0x06;    /* NOT contiguous with L & RBUTTON */

/*
 * 0x07 : unassigned
 */

        const long VK_BACK         = 0x08;
        const long VK_TAB          = 0x09;

/*
 * 0x0A - 0x0B : reserved
 */

        const long VK_CLEAR        = 0x0C;
        const long VK_RETURN       = 0x0D;

        const long VK_SHIFT        = 0x10;
        const long VK_CONTROL      = 0x11;
        const long VK_MENU         = 0x12;
        const long VK_PAUSE        = 0x13;
        const long VK_CAPITAL      = 0x14;

        const long VK_KANA         = 0x15;
        const long VK_HANGEUL      = 0x15; /* old name - should be here for compatibility */
        const long VK_HANGUL       = 0x15;
        const long VK_JUNJA        = 0x17;
        const long VK_FINAL        = 0x18;
        const long VK_HANJA        = 0x19;
        const long VK_KANJI        = 0x19;

        const long VK_ESCAPE       = 0x1B;

        const long VK_CONVERT      = 0x1C;
        const long VK_NONCONVERT   = 0x1D;
        const long VK_ACCEPT       = 0x1E;
        const long VK_MODECHANGE   = 0x1F;

        const long VK_SPACE        = 0x20;
        const long VK_PRIOR        = 0x21;
        const long VK_NEXT         = 0x22;
        const long VK_END          = 0x23;
        const long VK_HOME         = 0x24;
        const long VK_LEFT         = 0x25;
        const long VK_UP           = 0x26;
        const long VK_RIGHT        = 0x27;
        const long VK_DOWN         = 0x28;
        const long VK_SELECT       = 0x29;
        const long VK_PRINT        = 0x2A;
        const long VK_EXECUTE      = 0x2B;
        const long VK_SNAPSHOT     = 0x2C;
        const long VK_INSERT       = 0x2D;
        const long VK_DELETE       = 0x2E;
        const long VK_HELP         = 0x2F;

/*
 * VK_0 - VK_9 are the same as ASCII '0' - '9' (0x30 - 0x39)
 * 0x40 : unassigned
 * VK_A - VK_Z are the same as ASCII 'A' - 'Z' (0x41 - 0x5A)
 */

        const long VK_LWIN         = 0x5B;
        const long VK_RWIN         = 0x5C;
        const long VK_APPS         = 0x5D;

/*
 * 0x5E : reserved
 */

        const long VK_SLEEP        = 0x5F;

        const long VK_NUMPAD0      = 0x60;
        const long VK_NUMPAD1      = 0x61;
        const long VK_NUMPAD2      = 0x62;
        const long VK_NUMPAD3      = 0x63;
        const long VK_NUMPAD4      = 0x64;
        const long VK_NUMPAD5      = 0x65;
        const long VK_NUMPAD6      = 0x66;
        const long VK_NUMPAD7      = 0x67;
        const long VK_NUMPAD8      = 0x68;
        const long VK_NUMPAD9      = 0x69;
        const long VK_MULTIPLY     = 0x6A;
        const long VK_ADD          = 0x6B;
        const long VK_SEPARATOR    = 0x6C;
        const long VK_SUBTRACT     = 0x6D;
        const long VK_DECIMAL      = 0x6E;
        const long VK_DIVIDE       = 0x6F;
        const long VK_F1           = 0x70;
        const long VK_F2           = 0x71;
        const long VK_F3           = 0x72;
        const long VK_F4           = 0x73;
        const long VK_F5           = 0x74;
        const long VK_F6           = 0x75;
        const long VK_F7           = 0x76;
        const long VK_F8           = 0x77;
        const long VK_F9           = 0x78;
        const long VK_F10          = 0x79;
        const long VK_F11          = 0x7A;
        const long VK_F12          = 0x7B;
        const long VK_F13          = 0x7C;
        const long VK_F14          = 0x7D;
        const long VK_F15          = 0x7E;
        const long VK_F16          = 0x7F;
        const long VK_F17          = 0x80;
        const long VK_F18          = 0x81;
        const long VK_F19          = 0x82;
        const long VK_F20          = 0x83;
        const long VK_F21          = 0x84;
        const long VK_F22          = 0x85;
        const long VK_F23          = 0x86;
        const long VK_F24          = 0x87;

/*
 * 0x88 - 0x8F : unassigned
 */

        const long VK_NUMLOCK      = 0x90;
        const long VK_SCROLL       = 0x91;

/*
 * NEC PC-9800 kbd definitions
 */
        const long VK_OEM_NEC_EQUAL= 0x92;   // '=' key on numpad

/*
 * Fujitsu/OASYS kbd definitions
 */
        const long VK_OEM_FJ_JISHO = 0x92;   // 'Dictionary' key
        const long VK_OEM_FJ_MASSHOU =0x93;   // 'Unregister word' key
        const long VK_OEM_FJ_TOUROKU =0x94;   // 'Register word' key
        const long VK_OEM_FJ_LOYA  = 0x95;   // 'Left OYAYUBI' key
        const long VK_OEM_FJ_ROYA  = 0x96;   // 'Right OYAYUBI' key

/*
 * 0x97 - 0x9F : unassigned
 */

/*
 * VK_L* & VK_R* - left and right Alt, Ctrl and Shift virtual keys.
 * Used only as parameters to GetAsyncKeyState() and GetKeyState().
 * No other API or message will distinguish left and right keys in this way.
 */
        const long VK_LSHIFT       = 0xA0;
        const long VK_RSHIFT       = 0xA1;
        const long VK_LCONTROL     = 0xA2;
        const long VK_RCONTROL     = 0xA3;
        const long VK_LMENU        = 0xA4;
        const long VK_RMENU        = 0xA5;

        const long VK_BROWSER_BACK      = 0xA6;
        const long VK_BROWSER_FORWARD   = 0xA7;
        const long VK_BROWSER_REFRESH   = 0xA8;
        const long VK_BROWSER_STOP      = 0xA9;
        const long VK_BROWSER_SEARCH    = 0xAA;
        const long VK_BROWSER_FAVORITES = 0xAB;
        const long VK_BROWSER_HOME      = 0xAC;

        const long VK_VOLUME_MUTE       = 0xAD;
        const long VK_VOLUME_DOWN       = 0xAE;
        const long VK_VOLUME_UP         = 0xAF;
        const long VK_MEDIA_NEXT_TRACK  = 0xB0;
        const long VK_MEDIA_PREV_TRACK  = 0xB1;
        const long VK_MEDIA_STOP        = 0xB2;
        const long VK_MEDIA_PLAY_PAUSE  = 0xB3;
        const long VK_LAUNCH_MAIL       = 0xB4;
        const long VK_LAUNCH_MEDIA_SELECT= 0xB5;
        const long VK_LAUNCH_APP1       = 0xB6;
        const long VK_LAUNCH_APP2       = 0xB7;

        const long VTA_BASELINE                     = TA_BASELINE;
        const long VTA_LEFT                         = TA_BOTTOM;
        const long VTA_RIGHT                        = TA_TOP;
        const long VTA_CENTER                       = TA_CENTER;
        const long VTA_BOTTOM                       = TA_RIGHT;
        const long VTA_TOP                          = TA_LEFT;

        const long WAIT_ABANDONED                    = 0x80;
        const long WAIT_ABANDONED_0                    = 0x80;
        const long WAIT_FAILED                        = -1;
        const long WAIT_IO_COMPLETION                = 0xC0;
        const long WAIT_OBJECT_0                    = 0;
        const long WAIT_OBJECT_1                    = 1;
        const long WAIT_TIMEOUT                        = 0x102;

        const long WHEEL_DELTA                     = 120;
        const long WINDING                             = 2;

        const long WM_ACTIVATEAPP                  =0x001C;
        const long WM_CANCELMODE                   =0x001F;
        const long WM_CHAR                       = 0x0102;
        const long WM_CHILDACTIVATE                =0x0022;
        const long WM_CLOSE                        = 0x0010;
        const long WM_DEADCHAR                   = 0x0103;
        const long WM_DEVMODECHANGE                =0x001B;
        const long WM_ENABLE                       =0x000A;
        const long WM_ENDSESSION                   =0x0016;
        const long WM_ERASEBKGND                 = 0x0014;
        const long WM_FONTCHANGE                   =0x001D;
        const long WM_GETMINMAXINFO                =0x0024;
        const long WM_GETTEXT                      =0x000D;
        const long WM_GETTEXTLENGTH                =0x000E;
        const long WM_KEYDOWN                    = 0x0100;
        const long WM_KEYUP                      = 0x0101;
        const long WM_LBUTTONDOWN                  =0x0201;
        const long WM_LBUTTONUP                    =0x0202;
        const long WM_LBUTTONDBLCLK                =0x0203;
        const long WM_MBUTTONDOWN                  =0x0207;
        const long WM_MBUTTONUP                    =0x0208;
        const long WM_MBUTTONDBLCLK                =0x0209;
        const long WM_MOUSEACTIVATE                =0x0021;
        const long WM_MOUSEHOVER                     = 0x2A1;
        const long WM_MOUSELEAVE                     = 0x2A3;
        const long WM_MOUSEMOVE                    =0x0200;
        const long WM_MOUSEWHEEL                   =0x020A;
        const long WM_NCDESTROY                    = 0x0082;
        const long WM_NCPAINT                      = 0x0085;
        const long WM_PAINT                        = 0xF;
        const long WM_QUERYENDSESSION              =0x0011;
        const long WM_QUERYOPEN                    =0x0013;
        const long WM_QUEUESYNC                    =0x0023;
        const long WM_QUIT                         =0x0012;
        const long WM_RBUTTONDOWN                  =0x0204;
        const long WM_RBUTTONUP                    =0x0205;
        const long WM_RBUTTONDBLCLK                =0x0206;
        const long WM_SETCURSOR                    =0x0020;
        const long WM_SETFOCUS                     =0x0007;
        const long WM_SETREDRAW                    =0x000B;
        const long WM_SETTEXT                      =0x000C;
        const long WM_KILLFOCUS                    =0x0008;
        const long WM_SETTINGCHANGE                =0x001a;    /* =WM_WININICHANGE*/
        const long WM_SHOWWINDOW                   =0x0018;
        const long WM_SIZE                            = 5;
        const long WM_SYSCHAR                    = 0x0106;
        const long WM_SYSCOLORCHANGE               =0x0015;
        const long WM_SYSDEADCHAR                = 0x0107;
        const long WM_SYSKEYDOWN                 = 0x0104;
        const long WM_SYSKEYUP                   = 0x0105;
        const long WM_TIMECHANGE                       = 0x1E;
        const long WM_UNICHAR                    = 0x0109;
        const long WM_USER                            = 0x400;
        const long WM_WININICHANGE                 =0x001A;

        const long WS_OVERLAPPED                  = 0x00000000;
        const long WS_POPUP                       = 0x80000000;
        const long WS_CHILD                       = 0x40000000;
        const long WS_MINIMIZE                    = 0x20000000;
        const long WS_VISIBLE                     = 0x10000000;
        const long WS_DISABLED                    = 0x08000000;
        const long WS_CLIPSIBLINGS                = 0x04000000;
        const long WS_CLIPCHILDREN                = 0x02000000;
        const long WS_MAXIMIZE                    = 0x01000000;
        const long WS_CAPTION                     = 0x00C00000;     
        const long WS_BORDER                      = 0x00800000;
        const long WS_DLGFRAME                    = 0x00400000;
        const long WS_VSCROLL                     = 0x00200000;
        const long WS_HSCROLL                     = 0x00100000;
        const long WS_SYSMENU                     = 0x00080000;
        const long WS_THICKFRAME                  = 0x00040000;
        const long WS_GROUP                       = 0x00020000;
        const long WS_TABSTOP                     = 0x00010000;
        const long WS_MINIMIZEBOX                 = 0x00020000;
        const long WS_MAXIMIZEBOX                 = 0x00010000;
        const long WS_TILED                            = WS_OVERLAPPED;
        const long WS_ICONIC                        = WS_MINIMIZE;
        const long WS_SIZEBOX                        = WS_THICKFRAME;

        const long WS_OVERLAPPEDWINDOW                =  (WS_OVERLAPPED  | 
                                                        WS_CAPTION     | 
                                                        WS_SYSMENU     | 
                                                        WS_THICKFRAME  | 
                                                        WS_MINIMIZEBOX | 
                                                        WS_MAXIMIZEBOX);

        const long WS_TILEDWINDOW                    = WS_OVERLAPPEDWINDOW;

        const long WS_POPUPWINDOW                    = (WS_POPUP          | 
                                                     WS_BORDER         | 
                                                     WS_SYSMENU);

        const long WS_CHILDWINDOW                    = (WS_CHILD);

        const long WS_EX_DLGMODALFRAME            = 0x00000001;
        const long WS_EX_NOPARENTNOTIFY           = 0x00000004;
        const long WS_EX_TOPMOST                  = 0x00000008;
        const long WS_EX_ACCEPTFILES              = 0x00000010;
        const long WS_EX_TRANSPARENT              = 0x00000020;
        const long WS_EX_MDICHILD                 = 0x00000040;
        const long WS_EX_TOOLWINDOW               = 0x00000080;
        const long WS_EX_WINDOWEDGE               = 0x00000100;
        const long WS_EX_CLIENTEDGE               = 0x00000200;
        const long WS_EX_CONTEXTHELP              = 0x00000400;
        const long WS_EX_RIGHT                    = 0x00001000;
        const long WS_EX_LEFT                     = 0x00000000;
        const long WS_EX_RTLREADING               = 0x00002000;
        const long WS_EX_LTRREADING               = 0x00000000;
        const long WS_EX_LEFTSCROLLBAR            = 0x00004000;
        const long WS_EX_RIGHTSCROLLBAR           = 0x00000000;
        const long WS_EX_CONTROLPARENT            = 0x00010000;
        const long WS_EX_STATICEDGE               = 0x00020000;
        const long WS_EX_APPWINDOW                = 0x00040000;
        const long WS_EX_OVERLAPPEDWINDOW            = (WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE);
        const long WS_EX_PALETTEWINDOW                = (WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST);
        const long WS_EX_LAYERED                  = 0x00080000;
        const long WS_EX_NOINHERITLAYOUT          = 0x00100000;
        const long WS_EX_LAYOUTRTL                = 0x00400000;
        const long WS_EX_COMPOSITED               = 0x02000000;
        const long WS_EX_NOACTIVATE               = 0x08000000;

        const long WT_EXECUTEDEFAULT                   = 0x00000000;
        const long WT_EXECUTEINIOTHREAD                = 0x00000001;                           
        const long WT_EXECUTEINUITHREAD                = 0x00000002;                           
        const long WT_EXECUTEINWAITTHREAD              = 0x00000004;                           
        const long WT_EXECUTEONLYONCE                  = 0x00000008;                           
        const long WT_EXECUTEINTIMERTHREAD             = 0x00000020;                           
        const long WT_EXECUTELONGFUNCTION              = 0x00000010;                           
        const long WT_EXECUTEINPERSISTENTIOTHREAD      = 0x00000040;                   
        const long WT_EXECUTEINPERSISTENTTHREAD     = 0x00000080;                      
        const long WT_TRANSFER_IMPERSONATION         = 0x00000100;                         

    };

};
