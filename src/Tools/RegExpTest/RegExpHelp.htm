

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head id="ctl00_Head1">
<link rel="stylesheet" type="text/css" href="file://C:\Projects\Tools\RegExpTest\regexp.css"></link>
<title>
	Regular Expression Syntax (Scripting)
</title></head>

<body id="ctl00_Mtps_body" dir="ltr">

      <div id="mainBody">
        
        
        
    <p><!----></p> 
<p>Updated: August 2009</p><div class="introduction"><p>A <span class="parameter">regular expression</span> describes one or more strings to match when you search a body of text. The expression serves as a template for matching a character pattern to the string that is being searched.</p><p>A regular expression consists of ordinary characters (for example, letters a through z) and special characters, known as <span class="parameter">metacharacters</span>.</p></div><span>
<div  class="MTPS_CollapsibleRegion">
<div  class="CollapseRegionLink"> <!-- ApplyClick with current id -->
<img  class='LibC_o' src="http://i.msdn.microsoft.com/Global/Images/clear.gif" style='border-width:0px;vertical-align:middle;' />
&nbsp;Special Characters
</div>
<div class="MTPS_CollapsibleSection" style='display:block;' >  
<a id="sectionToggle0"><!----></a><p>The following table contains a list of single-character metacharacters and their behavior in regular expressions.</p><div class="alert"><table><tr><th><!--src=[../icons/alert_note.gif]--><img alt="Note" src="http://i.msdn.microsoft.com/1400241x.alert_note(en-us,VS.85).gif" /><strong>Note:</strong></th></tr><tr><td><p>To match one of these special characters, you must first <span class="parameter">escape</span> the character, that is, precede it with a backslash character (\). For instance, to search for the "+" literal character, you can use the expression "\+".</p></td></tr></table></div><div class="caption"><!----></div><div class="tableSection"><table><tr><th><p>Metacharacter</p></th><th><p>Behavior</p></th><th><p>Example</p></th></tr><tr><td><p>*</p></td><td><p>Matches the previous character or subexpression zero or more times.</p><p>Equivalent to <span class="code">{0,}</span>.</p></td><td><p><span class="code">zo*</span> matches "z" and "zoo".</p></td></tr><tr><td><p>+</p></td><td><p>Matches the previous character or subexpression one or more times.</p><p>Equivalent to <span class="code">{1,}</span>.</p></td><td><p><span class="code">zo+</span> matches "zo" and "zoo", but not "z".</p></td></tr><tr><td><p>?</p></td><td><p>Matches the previous character or subexpression zero or one time.</p><p>Equivalent to <span class="code">{0,1}</span>.</p><p>When ? immediately follows any other quantifier (*, +, ?, {<span class="parameter">n</span>}, {<span class="parameter">n</span>,}, or {<span class="parameter">n</span>,<span class="parameter">m</span>}), the matching pattern is <span class="parameter">non-greedy</span>. A non-greedy pattern matches as little of the searched string as possible. The default greedy pattern matches as much of the searched string as possible.</p></td><td><p><span class="code">zo?</span> matches "z" and "zo", but not "zoo".</p><p><span class="code">o+?</span> matches a single "o" in "oooo", and <span class="code">o+</span> matches all "o"s.</p><p><span class="code">do(es)?</span> matches the "do" in "do" or "does".</p></td></tr><tr><td><p>^</p></td><td><p>Matches the position at the start of the searched string. If the <span><span class="input">Multiline</span></span> property is set, ^ also matches the position following \n or \r.</p><p>When used as the first character in a bracket expression, ^ negates the character set.</p></td><td><p><span class="code">^\d{3}</span> matches 3 numeric digits at the start of the searched string.</p><p><span class="code">[^abc]</span> matches any character except a, b, and c.</p></td></tr><tr><td><p>$</p></td><td><p>Matches the position at the end of the searched string. If the <span><span class="input">Multiline</span></span> property is set, $ also matches the position before \n or \r.</p></td><td><p><span class="code">\d{3}$</span> matches 3 numeric digits at the end of the searched string.</p></td></tr><tr><td><p>.</p></td><td><p>Matches any single character except the newline character \n. To match any character including the \n, use a pattern like <span class="code">[\s\S]</span>.</p></td><td><p><span class="code">a.c</span> matches "abc", "a1c", and "a-c".</p></td></tr><tr><td><p>[]</p></td><td><p>Marks the start and end of a bracket expression.</p></td><td><p><span class="code">[1-4]</span> matches "1", "2", "3", or "4". <span class="code">[^aAeEiIoOuU]</span> matches any non-vowel character.</p></td></tr><tr><td><p>{}</p></td><td><p>Marks the start and end of a quantifier expression.</p></td><td><p><span class="code">a{2,3}</span> matches "aa" and "aaa".</p></td></tr><tr><td><p>()</p></td><td><p>Marks the start and end of a subexpression. Subexpressions can be saved for later use.</p></td><td><p><span class="code">A(\d)</span> matches "A0" to "A9". The digit is saved for later use.</p></td></tr><tr><td><p>|</p></td><td><p>Indicates a choice between two or more items.</p></td><td><p><span class="code">z|food</span> matches "z" or "food". <span class="code">(z|f)ood</span> matches "zood" or "food".</p></td></tr><tr><td><p>/</p></td><td><p>Denotes the start or end of a literal regular expression pattern in JScript. After the second "/", single-character flags can be added to specify search behavior.</p></td><td><p><span class="code">/abc/gi</span> is a JScript literal regular expression that matches "abc". The <span class="code">g</span> (global) flag specifies to find all occurrences of the pattern, and the <span class="code">i</span> (ignore case) flag makes the search case-insensitive.</p></td></tr><tr><td><p>\</p></td><td><p>Marks the next character as a special character, a literal, a backreference, or an octal escape.</p></td><td><p><span class="code">\n</span> matches a newline character. <span class="code">\(</span> matches "(". <span class="code">\\</span> matches "\". </p></td></tr></table></div><p>Most special characters lose their meaning and represent ordinary characters when they occur inside a bracket expression. For more information, see "Characters in Bracket Expressions" in <span><a id="ctl00_MTCS_main_ctl10_ctl00_ctl01" href="http://msdn.microsoft.com/en-us/library/ta6y6h4z(VS.85).aspx" onclick="javascript:Track('ctl00_MTCS_main_ctl10_ctl00_contenthere|ctl00_MTCS_main_ctl10_ctl00_ctl01',this);">Lists of Matching Characters (Scripting)</a></span>.</p>
</div>
</div>
</span><span>
<div  class="MTPS_CollapsibleRegion">
<div  class="CollapseRegionLink"> <!-- ApplyClick with current id -->
<img  class='LibC_o' src="http://i.msdn.microsoft.com/Global/Images/clear.gif" style='border-width:0px;vertical-align:middle;' />
&nbsp;Metacharacters
</div>
<div class="MTPS_CollapsibleSection" style='display:block;' >  
<a id="sectionToggle1"><!----></a><p>The following table contains a list of multiple-character metacharacters and their behavior in regular expressions.</p><div class="caption"><!----></div><div class="tableSection"><table><tr><th><p>Metacharacter</p></th><th><p>Behavior</p></th><th><p>Example</p></th></tr><tr><td><p>\b</p></td><td><p>Matches a word boundary, that is, the position between a word and a space.</p></td><td><p><span class="code">er\b</span> matches the "er" in "never" but not the "er" in "verb".</p></td></tr><tr><td><p>\B</p></td><td><p>Matches a word non-boundary. </p></td><td><p><span class="code">er\B</span> matches the "er" in "verb" but not the "er" in "never".</p></td></tr><tr><td><p>\d</p></td><td><p>Matches a digit character.</p><p>Equivalent to <span class="code">[0-9]</span>.</p></td><td><p>In the searched string "12 345", <span class="code">\d{2}</span> matches "12" and "34". <span class="code">\d</span> matches "1", 2", "3", "4", and "5".</p></td></tr><tr><td><p>\D</p></td><td><p>Matches a nondigit character.</p><p>Equivalent to <span class="code">[^0-9]</span>.</p></td><td><p><span class="code">\D+</span> matches "abc" and " def" in "abc123 def".</p></td></tr><tr><td><p>\w</p></td><td><p>Matches any of the following characters: A-Z, a-z, 0-9, and underscore.</p><p>Equivalent to <span class="code">[A-Za-z0-9_]</span>.</p></td><td><p>In the searched string "The quick brown fox…", <span class="code">\w+</span> matches "The", "quick", "brown", and "fox".</p></td></tr><tr><td><p>\W</p></td><td><p>Matches any character except A-Z, a-z, 0-9, and underscore.</p><p>Equivalent to <span class="code">[^A-Za-z0-9_]</span>. </p></td><td><p>In the searched string "The quick brown fox…", <span class="code">\W+</span> matches "…" and all of the spaces.</p></td></tr><tr><td><p>[<span class="parameter">xyz</span>]</p></td><td><p>A character set. Matches any one of the specified characters.</p></td><td><p><span class="code">[abc]</span> matches the "a" in "plain".</p></td></tr><tr><td><p>[<span class="parameter">^xyz</span>]</p></td><td><p>A negative character set. Matches any character that is not specified . </p></td><td><p><span class="code">[^abc]</span> matches the "p" in "plain".</p></td></tr><tr><td><p>[<span class="parameter">a-z</span>]</p></td><td><p>A range of characters. Matches any character in the specified range.</p></td><td><p><span class="code">[a-z]</span> matches any lowercase alphabetical character in the range "a" through "z".</p></td></tr><tr><td><p>[<span class="parameter">^a-z</span>]</p></td><td><p>A negative range of characters. Matches any character not in the specified range. </p></td><td><p><span class="code">[^a-z]</span> matches any character not in the range "a" through "z".</p></td></tr><tr><td><p>{<span class="parameter">n</span>}</p></td><td><p>Matches exactly <span class="parameter">n</span> times. <span class="parameter">n</span> is a nonnegative integer.</p></td><td><p><span class="code">o{2}</span> does not match the "o" in "Bob", but does match the two "o"s in "food".</p></td></tr><tr><td><p>{<span class="parameter">n</span>,}</p></td><td><p>Matches at least <span class="parameter">n</span> times. <span class="parameter">n</span> is a nonnegative integer.</p><p><span class="code">*</span> is equivalent to <span class="code">{0,}</span>.</p><p><span class="code">+</span> is equivalent to <span class="code">{1,}</span>.</p></td><td><p><span class="code">o{2,}</span> does not match the "o" in "Bob" but does match all the "o"s in "foooood".</p></td></tr><tr><td><p>{<span class="parameter">n</span>,<span class="parameter">m</span>}</p></td><td><p>Matches at least <span class="parameter">n</span> and at most <span class="parameter">m</span> times. <span class="parameter">n</span> and <span class="parameter">m</span> are nonnegative integers, where <span class="parameter">n</span> &lt;= <span class="parameter">m</span>. There cannot be a space between the comma and the numbers.</p><p><span class="code">?</span> is equivalent to <span class="code">{0,1}</span>.</p></td><td><p>In the searched string"1234567", <span class="code">\d{1,3}</span> matches "123", "456", and "7".</p></td></tr><tr><td><p>(<span class="parameter">pattern</span>)</p></td><td><p>Matches <span class="parameter">pattern</span> and saves the match. You can retrieve the saved match from the <span><span class="input">SubMatches collection</span></span> in Visual Basic Scripting Edition (VBScript) or from array elements returned by the <span><span class="input">exec Method</span></span> in JScript. To match parentheses characters ( ), use "\(" or "\)".</p></td><td><p><span class="code">(Chapter|Section) [1-9]</span> matches "Chapter 5", and "Chapter" is saved for later use.</p></td></tr><tr><td><p>(?:<span class="parameter">pattern</span>)</p></td><td><p>Matches <span class="parameter">pattern</span> but does not save the match, that is, the match is not stored for possible later use. This is useful for combining parts of a pattern with the "or" character (|).</p></td><td><p><span class="code">industr(?:y|ies)</span> is equivalent to <span class="code">industry|industries</span>.</p></td></tr><tr><td><p>(?=<span class="parameter">pattern</span>)</p></td><td><p>Positive lookahead. After a match is found, the search for the next match starts before the matched lookahead text. The match is not saved for later use.</p></td><td><p><span class="code">(?=.*\d).{4,8}</span> applies a restriction that a password must be 4 to 8 characters long, and must contain at least one digit.</p><p>Within the pattern, <span class="code">.*\d</span> finds any number of characters followed by a digit. For the searched string "abc3qr", this matches "abc3".</p><p>Starting before, instead of after, that match, <span class="code">.{4,8}</span> matches a 4-8 character string. This matches "abc3qr".</p></td></tr><tr><td><p>(?!<span class="parameter">pattern</span>)</p></td><td><p>Negative lookahead. Matches a search string that does not match <span class="parameter">pattern</span>. After a match is found, the search for the next match starts before the matched lookahead text. The match is not saved for later use.</p></td><td><p><span class="code">\b(?!th)\w+\b</span> matches words that do not start with "th".</p><p>Within the pattern, <span class="code">\b</span> matches a word boundary. For the searched string " quick ", this matches the first space. <span class="code">(?!th)</span> matches a string that is not "th". This matches "qu".</p><p>Starting before that match, <span class="code">\w+</span> matches a word. This matches "quick". </p></td></tr><tr><td><p>\c<span class="parameter">x</span></p></td><td><p>Matches the control character indicated by <span class="parameter">x</span>. The value of <span class="parameter">x</span> must be in the range of A-Z or a-z. If it is not, c is assumed to be a literal "c" character. </p></td><td><p><span class="code">\cM</span> matches a CTRL+M or carriage return character.</p></td></tr><tr><td><p>\x<span class="parameter">n</span></p></td><td><p>Matches <span class="parameter">n</span>, where <span class="parameter">n</span> is a hexadecimal escape value. Hexadecimal escape values must be exactly two digits long. Allows ASCII codes to be used in regular expressions.</p></td><td><p><span class="code">\x41</span> matches "A". <span class="code">\x041</span> is equivalent to "\x04" followed by "1", (because <span class="parameter">n</span> must be exactly 2 digits).</p></td></tr><tr><td><p>\<span class="parameter">num</span></p></td><td><p>Matches <span class="parameter">num</span>, where <span class="parameter">num</span> is a positive integer. This is a reference to saved matches.</p></td><td><p><span class="code">(.)\1</span> matches two consecutive identical characters.</p></td></tr><tr><td><p>\<span class="parameter">n</span></p></td><td><p>Identifies either an octal escape value or a backreference. If \<span class="parameter">n</span> is preceded by at least <span class="parameter">n</span> captured subexpressions, <span class="parameter">n</span> is a backreference. Otherwise, <span class="parameter">n</span> is an octal escape value if <span class="parameter">n</span> is an octal digit (0-7).</p></td><td><p><span class="code">(\d)\1</span> matches two consecutive identical digits.</p></td></tr><tr><td><p>\<span class="parameter">nm</span></p></td><td><p>Identifies either an octal escape value or a backreference. If \<span class="parameter">nm</span> is preceded by at least <span class="parameter">nm</span> captured subexpressions, <span class="parameter">nm</span> is a backreference. If \<span class="parameter">nm</span> is preceded by at least <span class="parameter">n</span> captured subexpressions, <span class="parameter">n</span> is a backreference followed by literal <span class="parameter">m</span>. If neither of those conditions exist, \<span class="parameter">nm</span> matches octal escape value <span class="parameter">nm</span> when <span class="parameter">n</span> and <span class="parameter">m</span> are octal digits (0-7).</p></td><td><p><span class="code">\11</span> matches a tab character.</p></td></tr><tr><td><p>\<span class="parameter">nml</span></p></td><td><p>Matches octal escape value <span class="parameter">nml</span> when <span class="parameter">n</span> is an octal digit (0-3) and <span class="parameter">m</span> and <span class="parameter">l</span> are octal digits (0-7).</p></td><td><p><span class="code">\011</span> matches a tab character.</p></td></tr><tr><td><p>\u<span class="parameter">n</span></p></td><td><p>Matches <span class="parameter">n</span>, where <span class="parameter">n</span> is a Unicode character expressed as four hexadecimal digits.</p></td><td><p><span class="code">\u00A9</span> matches the copyright symbol (©).</p></td></tr></table></div>
</div>
</div>
</span><span>
<div  class="MTPS_CollapsibleRegion">
<div  class="CollapseRegionLink"> <!-- ApplyClick with current id -->
<img  class='LibC_o' src="http://i.msdn.microsoft.com/Global/Images/clear.gif" style='border-width:0px;vertical-align:middle;' />
&nbsp;Nonprinting Characters
</div>
<div class="MTPS_CollapsibleSection" style='display:block;' >  
<a id="sectionToggle2"><!----></a><p>The following table contains escape sequences that represent non-printing characters.</p><div class="caption"><!----></div><div class="tableSection"><table><tr><th><p>Character</p></th><th><p>Matches</p></th><th><p>Equivalent to</p></th></tr><tr><td><p>\f</p></td><td><p>Form-feed character.</p></td><td><p><span class="code">\x0c</span> and <span class="code">\cL</span></p></td></tr><tr><td><p>\n</p></td><td><p>Newline character.</p></td><td><p><span class="code">\x0a</span> and <span class="code">\cJ</span></p></td></tr><tr><td><p>\r</p></td><td><p>Carriage-return character.</p></td><td><p><span class="code">\x0d</span> and <span class="code">\cM</span></p></td></tr><tr><td><p>\s</p></td><td><p>Any white-space character. This includes space, tab, and form feed.</p></td><td><p><span class="code">[\f\n\r\t\v]</span></p></td></tr><tr><td><p>\S</p></td><td><p>Any non–white space character. </p></td><td><p><span class="code">[^\f\n\r\t\v]</span></p></td></tr><tr><td><p>\t</p></td><td><p>Tab character.</p></td><td><p><span class="code">\x09</span> and <span class="code">\cI</span></p></td></tr><tr><td><p>\v</p></td><td><p>Vertical tab character.</p></td><td><p><span class="code">\x0b</span> and <span class="code">\cK</span></p></td></tr></table></div>
</div>
</div>
</span><span>
<div  class="MTPS_CollapsibleRegion">
<div  class="CollapseRegionLink"> <!-- ApplyClick with current id -->
<img  class='LibC_o' src="http://i.msdn.microsoft.com/Global/Images/clear.gif" style='border-width:0px;vertical-align:middle;' />
&nbsp;Order of Precedence
</div>
<div class="MTPS_CollapsibleSection" style='display:block;' >  
<a id="sectionToggle3"><!----></a><p>A regular expression is evaluated much like an arithmetic expression; that is, it is evaluated from left to right and follows an order of precedence.</p><p>The following table contains the order of precedence of the regular expression operators, from highest to lowest.</p><div class="caption"><!----></div><div class="tableSection"><table><tr><th><p>Operator or operators</p></th><th><p>Description</p></th></tr><tr><td><p>\</p></td><td><p>Escape</p></td></tr><tr><td><p>(), (?:), (?=), []</p></td><td><p>Parentheses and brackets</p></td></tr><tr><td><p>*, +, ?, {<span class="parameter">n</span>}, {<span class="parameter">n</span>,}, {<span class="parameter">n</span>,<span class="parameter">m</span>}</p></td><td><p>Quantifiers</p></td></tr><tr><td><p>^, $, \<span class="parameter">anymetacharacter</span></p></td><td><p>Anchors and sequences</p></td></tr><tr><td><p>|</p></td><td><p>Alternation</p></td></tr></table></div><p>Characters have higher precedence than the alternation operator, which, for example, allows "m|food" to match "m" or "food".</p>
</div>
</div>
</span>
 
</body>

<script language="javascript" type="text/javascript" src="http://js.microsoft.com/library/svy/sto/broker.js"></script>
</html>
